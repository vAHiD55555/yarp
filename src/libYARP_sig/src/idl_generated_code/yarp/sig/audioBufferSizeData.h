/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_STRUCT_AUDIOBUFFERSIZEDATA_H
#define YARP_THRIFT_GENERATOR_STRUCT_AUDIOBUFFERSIZEDATA_H

#include <yarp/sig/api.h>

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>

namespace yarp::sig {

class YARP_sig_API audioBufferSizeData :
        public yarp::os::idl::WirePortable
{
public:
    // Fields
    std::int32_t m_samples{0};
    std::int32_t m_channels{0};
    std::int32_t m_depth{0};
    std::int32_t size{0};

    // Default constructor
    audioBufferSizeData() = default;

    // Constructor with field values
    audioBufferSizeData(const std::int32_t m_samples,
                        const std::int32_t m_channels,
                        const std::int32_t m_depth,
                        const std::int32_t size);

    // Read structure on a Wire
    bool read(yarp::os::idl::WireReader& reader) override;

    // Read structure on a Connection
    bool read(yarp::os::ConnectionReader& connection) override;

    // Write structure on a Wire
    bool write(const yarp::os::idl::WireWriter& writer) const override;

    // Write structure on a Connection
    bool write(yarp::os::ConnectionWriter& connection) const override;

    // Convert to a printable string
    std::string toString() const;

    // If you want to serialize this class without nesting, use this helper
    typedef yarp::os::idl::Unwrapped<audioBufferSizeData> unwrapped;

private:
    // read/write m_samples field
    bool read_m_samples(yarp::os::idl::WireReader& reader);
    bool write_m_samples(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_m_samples(yarp::os::idl::WireReader& reader);
    bool nested_write_m_samples(const yarp::os::idl::WireWriter& writer) const;

    // read/write m_channels field
    bool read_m_channels(yarp::os::idl::WireReader& reader);
    bool write_m_channels(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_m_channels(yarp::os::idl::WireReader& reader);
    bool nested_write_m_channels(const yarp::os::idl::WireWriter& writer) const;

    // read/write m_depth field
    bool read_m_depth(yarp::os::idl::WireReader& reader);
    bool write_m_depth(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_m_depth(yarp::os::idl::WireReader& reader);
    bool nested_write_m_depth(const yarp::os::idl::WireWriter& writer) const;

    // read/write size field
    bool read_size(yarp::os::idl::WireReader& reader);
    bool write_size(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_size(yarp::os::idl::WireReader& reader);
    bool nested_write_size(const yarp::os::idl::WireWriter& writer) const;
};

} // namespace yarp::sig

#endif // YARP_THRIFT_GENERATOR_STRUCT_AUDIOBUFFERSIZEDATA_H
