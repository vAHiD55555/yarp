/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sun Mar 10 12:19:37 2024


#ifndef PORTAUDIORECORDERDEVICEDRIVER_PARAMSPARSER_H
#define PORTAUDIORECORDERDEVICEDRIVER_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class PortAudioRecorderDeviceDriver.
*
* These are the used parameters:
* | Group name | Parameter name    | Type   | Units   | Default Value | Required | Description                                                           | Notes                                                    |
* |:----------:|:-----------------:|:------:|:-------:|:-------------:|:--------:|:---------------------------------------------------------------------:|:--------------------------------------------------------:|
* | -          | id                | int    | -       | -1            | 0        | The device id, if multiple sound cards are present                    | if not specified, the default system device will be used |
* | -          | driver_frame_size | size_t | samples | 512           | 0        | the number of samples to process on each iteration of the main thread | -                                                        |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device portaudioRecorder --id -1 --driver_frame_size 512
* \endcode
*
* \code{.unparsed}
* yarpdev --device portaudioRecorder
* \endcode
*
*/

class PortAudioRecorderDeviceDriver_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    PortAudioRecorderDeviceDriver_ParamsParser();
    ~PortAudioRecorderDeviceDriver_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"PortAudioRecorderDeviceDriver"};
    const std::string m_device_name = {"portaudioRecorder"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_id_defaultValue = {"-1"};
    const std::string m_driver_frame_size_defaultValue = {"512"};

    int m_id = {-1};
    size_t m_driver_frame_size = {512};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
