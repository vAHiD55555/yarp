/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Fri Apr  5 16:06:46 2024


#include "FrameGrabberCropper_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(FrameGrabberCropperParamsCOMPONENT, "yarp.device.FrameGrabberCropper")
}


FrameGrabberCropper_ParamsParser::FrameGrabberCropper_ParamsParser()
{
}


std::vector<std::string> FrameGrabberCropper_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("x1");
    params.push_back("y1");
    params.push_back("x2");
    params.push_back("y2");
    params.push_back("forwardRgbVisualParams");
    return params;
}


bool      FrameGrabberCropper_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(FrameGrabberCropperParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter x1
    {
        if (config.check("x1"))
        {
            m_x1 = config.find("x1").asInt64();
            yCInfo(FrameGrabberCropperParamsCOMPONENT) << "Parameter 'x1' using value:" << m_x1;
        }
        else
        {
            yCError(FrameGrabberCropperParamsCOMPONENT) << "Mandatory parameter 'x1' not found!";
            yCError(FrameGrabberCropperParamsCOMPONENT) << "Description of the parameter: x1";
            return false;
        }
        prop_check.unput("x1");
    }

    //Parser of parameter y1
    {
        if (config.check("y1"))
        {
            m_y1 = config.find("y1").asInt64();
            yCInfo(FrameGrabberCropperParamsCOMPONENT) << "Parameter 'y1' using value:" << m_y1;
        }
        else
        {
            yCError(FrameGrabberCropperParamsCOMPONENT) << "Mandatory parameter 'y1' not found!";
            yCError(FrameGrabberCropperParamsCOMPONENT) << "Description of the parameter: y1";
            return false;
        }
        prop_check.unput("y1");
    }

    //Parser of parameter x2
    {
        if (config.check("x2"))
        {
            m_x2 = config.find("x2").asInt64();
            yCInfo(FrameGrabberCropperParamsCOMPONENT) << "Parameter 'x2' using value:" << m_x2;
        }
        else
        {
            yCError(FrameGrabberCropperParamsCOMPONENT) << "Mandatory parameter 'x2' not found!";
            yCError(FrameGrabberCropperParamsCOMPONENT) << "Description of the parameter: x2";
            return false;
        }
        prop_check.unput("x2");
    }

    //Parser of parameter y2
    {
        if (config.check("y2"))
        {
            m_y2 = config.find("y2").asInt64();
            yCInfo(FrameGrabberCropperParamsCOMPONENT) << "Parameter 'y2' using value:" << m_y2;
        }
        else
        {
            yCError(FrameGrabberCropperParamsCOMPONENT) << "Mandatory parameter 'y2' not found!";
            yCError(FrameGrabberCropperParamsCOMPONENT) << "Description of the parameter: y2";
            return false;
        }
        prop_check.unput("y2");
    }

    //Parser of parameter forwardRgbVisualParams
    {
        if (config.check("forwardRgbVisualParams"))
        {
            m_forwardRgbVisualParams = config.find("forwardRgbVisualParams").asBool();
            yCInfo(FrameGrabberCropperParamsCOMPONENT) << "Parameter 'forwardRgbVisualParams' using value:" << m_forwardRgbVisualParams;
        }
        else
        {
            yCInfo(FrameGrabberCropperParamsCOMPONENT) << "Parameter 'forwardRgbVisualParams' using DEFAULT value:" << m_forwardRgbVisualParams;
        }
        prop_check.unput("forwardRgbVisualParams");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(FrameGrabberCropperParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(FrameGrabberCropperParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      FrameGrabberCropper_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: FrameGrabberCropper\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'x1': x1\n");
    doc = doc + std::string("'y1': y1\n");
    doc = doc + std::string("'x2': x2\n");
    doc = doc + std::string("'y2': y2\n");
    doc = doc + std::string("'forwardRgbVisualParams': Forward the the IRgbVisualParams calls to the attached device\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device frameGrabberCropper --x1 0 --y1 0 --x2 100 --y2 100 --forwardRgbVisualParams false\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device frameGrabberCropper --x1 0 --y1 0 --x2 100 --y2 100\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
