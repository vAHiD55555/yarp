/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Sep  5 14:59:20 2024


#ifndef RANGEFINDER2DTRANSFORMER_PARAMSPARSER_H
#define RANGEFINDER2DTRANSFORMER_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class Rangefinder2DTransformer.
*
* These are the used parameters:
* | Group name | Parameter name        | Type   | Units | Default Value | Required | Description                                                              | Notes                                             |
* |:----------:|:---------------------:|:------:|:-----:|:-------------:|:--------:|:------------------------------------------------------------------------:|:-------------------------------------------------:|
* | -          | device_position_x     | double | m     | 0             | 0        | X coordinate of the virtual lidar                                        | -                                                 |
* | -          | device_position_y     | double | m     | 0             | 0        | Y coordinate of the virtual lidar                                        | -                                                 |
* | -          | device_position_theta | double | deg   | 0             | 0        | Theta coordinate of the virtual lidar                                    | -                                                 |
* | -          | laser_frame_name      | string | -     | -             | 0        | If present, open a frameTranformClient to get the robot->laser transform | If present, disables device_position_* parameters |
* | -          | robot_frame_name      | string | -     | -             | 0        | If present, open a frameTranformClient to get the robot->laser transform | If present, disables device_position_* parameters |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device rangefinder2DTransformer --device_position_x 0 --device_position_y 0 --device_position_theta 0 --laser_frame_name <optional_value> --robot_frame_name <optional_value>
* \endcode
*
* \code{.unparsed}
* yarpdev --device rangefinder2DTransformer
* \endcode
*
*/

class Rangefinder2DTransformer_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    Rangefinder2DTransformer_ParamsParser();
    ~Rangefinder2DTransformer_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"Rangefinder2DTransformer"};
    const std::string m_device_name = {"rangefinder2DTransformer"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_device_position_x_defaultValue = {"0"};
    const std::string m_device_position_y_defaultValue = {"0"};
    const std::string m_device_position_theta_defaultValue = {"0"};
    const std::string m_laser_frame_name_defaultValue = {""};
    const std::string m_robot_frame_name_defaultValue = {""};

    double m_device_position_x = {0};
    double m_device_position_y = {0};
    double m_device_position_theta = {0};
    std::string m_laser_frame_name = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    std::string m_robot_frame_name = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;

    std::string   getDocumentationOfRangefinder2DTransformer() const;
};

#endif
