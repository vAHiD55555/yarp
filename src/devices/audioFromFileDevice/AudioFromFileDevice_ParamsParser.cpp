/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Fri Mar  8 16:13:05 2024


#include "AudioFromFileDevice_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(AudioFromFileDeviceParamsCOMPONENT, "yarp.device.AudioFromFileDevice")
}


AudioFromFileDevice_ParamsParser::AudioFromFileDevice_ParamsParser()
{
}


std::vector<std::string> AudioFromFileDevice_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("use_params_from_file");
    params.push_back("file_name");
    params.push_back("period");
    params.push_back("driver_frame_size");
    params.push_back("reset_on_stop");
    return params;
}


bool      AudioFromFileDevice_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(AudioFromFileDeviceParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter use_params_from_file
    {
        if (config.check("use_params_from_file"))
        {
            m_use_params_from_file = config.find("use_params_from_file").asBool();
            yCInfo(AudioFromFileDeviceParamsCOMPONENT) << "Parameter 'use_params_from_file' using value:" << m_use_params_from_file;
        }
        else
        {
            yCInfo(AudioFromFileDeviceParamsCOMPONENT) << "Parameter 'use_params_from_file' using DEFAULT value:" << m_use_params_from_file;
        }
        prop_check.unput("use_params_from_file");
    }

    //Parser of parameter file_name
    {
        if (config.check("file_name"))
        {
            m_file_name = config.find("file_name").asString();
            yCInfo(AudioFromFileDeviceParamsCOMPONENT) << "Parameter 'file_name' using value:" << m_file_name;
        }
        else
        {
            yCInfo(AudioFromFileDeviceParamsCOMPONENT) << "Parameter 'file_name' using DEFAULT value:" << m_file_name;
        }
        prop_check.unput("file_name");
    }

    //Parser of parameter period
    {
        if (config.check("period"))
        {
            m_period = config.find("period").asFloat64();
            yCInfo(AudioFromFileDeviceParamsCOMPONENT) << "Parameter 'period' using value:" << m_period;
        }
        else
        {
            yCInfo(AudioFromFileDeviceParamsCOMPONENT) << "Parameter 'period' using DEFAULT value:" << m_period;
        }
        prop_check.unput("period");
    }

    //Parser of parameter driver_frame_size
    {
        if (config.check("driver_frame_size"))
        {
            m_driver_frame_size = config.find("driver_frame_size").asInt64();
            yCInfo(AudioFromFileDeviceParamsCOMPONENT) << "Parameter 'driver_frame_size' using value:" << m_driver_frame_size;
        }
        else
        {
            yCInfo(AudioFromFileDeviceParamsCOMPONENT) << "Parameter 'driver_frame_size' using DEFAULT value:" << m_driver_frame_size;
        }
        prop_check.unput("driver_frame_size");
    }

    //Parser of parameter reset_on_stop
    {
        if (config.check("reset_on_stop"))
        {
            m_reset_on_stop = config.find("reset_on_stop").asBool();
            yCInfo(AudioFromFileDeviceParamsCOMPONENT) << "Parameter 'reset_on_stop' using value:" << m_reset_on_stop;
        }
        else
        {
            yCInfo(AudioFromFileDeviceParamsCOMPONENT) << "Parameter 'reset_on_stop' using DEFAULT value:" << m_reset_on_stop;
        }
        prop_check.unput("reset_on_stop");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(AudioFromFileDeviceParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(AudioFromFileDeviceParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      AudioFromFileDevice_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: AudioFromFileDevice\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'use_params_from_file': If set to true, recording params (e.g. channels, freq etc. are taken from file. Otherwise are AUDIO_BASE parameters are used and the file is converted to the specified format\n");
    doc = doc + std::string("'file_name': The name of the file opened by the module\n");
    doc = doc + std::string("'period': the period of thread which processes the file\n");
    doc = doc + std::string("'driver_frame_size': the number of samples to process on each iteration of the thread\n");
    doc = doc + std::string("'reset_on_stop': if enabled, the file is played back from the beginning every stop. Otherwise on start the previous position is resumed\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device audioFromFileDevice --use_params_from_file true --file_name audio.wav --period 0.010 --driver_frame_size 512 --reset_on_stop false\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device audioFromFileDevice\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
