/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Fri Mar  8 16:13:07 2024


#ifndef MAP2DSTORAGE_PARAMSPARSER_H
#define MAP2DSTORAGE_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class Map2DStorage.
*
* These are the used parameters:
* | Group name | Parameter name       | Type   | Units | Default Value       | Required | Description                                                                                        | Notes |
* |:----------:|:--------------------:|:------:|:-----:|:-------------------:|:--------:|:--------------------------------------------------------------------------------------------------:|:-----:|
* | -          | name                 | string | -     | /map2DStorage/rpc   | 0        | Full name of the rpc port opened by the device                                                     | -     |
* | -          | mapCollectionContext | string | -     | -                   | 0        | The context where to find the maps and the locations files. If left empty, no file will be loaded. | -     |
* | -          | mapCollectionFile    | string | -     | maps_collection.ini | 0        | The name of .ini file containing a map collection.                                                 | -     |
* | -          | mapLocationsFile     | string | -     | locations.ini       | 0        | The name of .ini file containing a list of locations.                                              | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device map2DStorage --name /map2DStorage/rpc --mapCollectionContext <optional_value> --mapCollectionFile maps_collection.ini --mapLocationsFile locations.ini
* \endcode
*
* \code{.unparsed}
* yarpdev --device map2DStorage
* \endcode
*
*/

class Map2DStorage_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    Map2DStorage_ParamsParser();
    ~Map2DStorage_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"Map2DStorage"};
    const std::string m_device_name = {"map2DStorage"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_name_defaultValue = {"/map2DStorage/rpc"};
    const std::string m_mapCollectionContext_defaultValue = {""};
    const std::string m_mapCollectionFile_defaultValue = {"maps_collection.ini"};
    const std::string m_mapLocationsFile_defaultValue = {"locations.ini"};

    std::string m_name = {"/map2DStorage/rpc"};
    std::string m_mapCollectionContext = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    std::string m_mapCollectionFile = {"maps_collection.ini"};
    std::string m_mapLocationsFile = {"locations.ini"};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
