/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Mon Sep  2 11:18:37 2024


#ifndef OPENCVGRABBER_PARAMSPARSER_H
#define OPENCVGRABBER_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class OpenCVGrabber.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units | Default Value | Required | Description                                                               | Notes |
* |:----------:|:--------------:|:------:|:-----:|:-------------:|:--------:|:-------------------------------------------------------------------------:|:-----:|
* | -          | movie          | string | -     | -             | 0        | if present, read an .avi file instead of opening a camera                 | -     |
* | -          | loop           | bool   | -     | false         | 0        | if true, and movie parameter is set, enable the loop playback of the file | -     |
* | -          | camera         | int    | -     | 0             | 0        | Id of the camera hardware device                                          | -     |
* | -          | framerate      | double | -     | -1            | 0        | Framerate. Default value obtained by the hardware                         | -     |
* | -          | width          | int    | -     | 0             | 0        | Width of the frame. Default value obtained by the hardware                | -     |
* | -          | height         | int    | -     | 0             | 0        | Height of the frame. Default value obtained by the hardware               | -     |
* | -          | flip_x         | bool   | -     | false         | 0        | Flip along the x axis                                                     | -     |
* | -          | flip_y         | bool   | -     | false         | 0        | flip along the y axis                                                     | -     |
* | -          | transpose      | bool   | -     | false         | 0        | Rotate the image by 90 degrees                                            | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device opencv_grabber --movie <optional_value> --loop false --camera 0 --framerate -1 --width 0 --height 0 --flip_x false --flip_y false --transpose false
* \endcode
*
* \code{.unparsed}
* yarpdev --device opencv_grabber
* \endcode
*
*/

class OpenCVGrabber_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    OpenCVGrabber_ParamsParser();
    ~OpenCVGrabber_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"OpenCVGrabber"};
    const std::string m_device_name = {"opencv_grabber"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_movie_defaultValue = {""};
    const std::string m_loop_defaultValue = {"false"};
    const std::string m_camera_defaultValue = {"0"};
    const std::string m_framerate_defaultValue = {"-1"};
    const std::string m_width_defaultValue = {"0"};
    const std::string m_height_defaultValue = {"0"};
    const std::string m_flip_x_defaultValue = {"false"};
    const std::string m_flip_y_defaultValue = {"false"};
    const std::string m_transpose_defaultValue = {"false"};

    std::string m_movie = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    bool m_loop = {false};
    int m_camera = {0};
    double m_framerate = {-1};
    int m_width = {0};
    int m_height = {0};
    bool m_flip_x = {false};
    bool m_flip_y = {false};
    bool m_transpose = {false};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
