/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Mar  7 17:59:47 2024


#ifndef ODOMETRY2D_NWS_YARP_PARAMSPARSER_H
#define ODOMETRY2D_NWS_YARP_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class Odometry2D_nws_yarp.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units | Default Value        | Required | Description                                                   | Notes         |
* |:----------:|:--------------:|:------:|:-----:|:--------------------:|:--------:|:-------------------------------------------------------------:|:-------------:|
* | -          | period         | double | s     | 0.02                 | 0        | refresh period of the broadcasted values in s                 | default 0.02s |
* | -          | name           | string | -     | /odometry2D_nws_yarp | 0        | The name of the server, used as a prefix for the opened ports | -             |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device odometry2D_nws_yarp --period 0.02 --name /odometry2D_nws_yarp
* \endcode
*
* \code{.unparsed}
* yarpdev --device odometry2D_nws_yarp
* \endcode
*
*/

class Odometry2D_nws_yarp_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    Odometry2D_nws_yarp_ParamsParser();
    ~Odometry2D_nws_yarp_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"Odometry2D_nws_yarp"};
    const std::string m_device_name = {"odometry2D_nws_yarp"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_period_defaultValue = {"0.02"};
    const std::string m_name_defaultValue = {"/odometry2D_nws_yarp"};

    double m_period = {0.02};
    std::string m_name = {"/odometry2D_nws_yarp"};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
