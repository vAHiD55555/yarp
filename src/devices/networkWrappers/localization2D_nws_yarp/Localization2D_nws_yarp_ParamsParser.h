/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Mar  7 17:59:46 2024


#ifndef LOCALIZATION2D_NWS_YARP_PARAMSPARSER_H
#define LOCALIZATION2D_NWS_YARP_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class Localization2D_nws_yarp.
*
* These are the used parameters:
* | Group name | Parameter name                 | Type   | Units | Default Value            | Required | Description                                                                                                                                                                             | Notes                                                     |
* |:----------:|:------------------------------:|:------:|:-----:|:------------------------:|:--------:|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|:---------------------------------------------------------:|
* | GENERAL    | period                         | double | s     | 0.01                     | 0        | The period of the working thread                                                                                                                                                        | -                                                         |
* | GENERAL    | retrieve_position_periodically | bool   | -     | true                     | 0        | If true, the subdevice is asked periodically to retrieve the current location. Otherwise the current location is obtained asynchronously when a getCurrentPosition() command is issued. | -                                                         |
* | GENERAL    | name                           | string | -     | /localization2D_nws_yarp | 0        | The name of the server, used as a prefix for the opened ports                                                                                                                           | By default ports opened are /xxx/rpc and /xxx/streaming:o |
* | GENERAL    | publish_odometry               | bool   | -     | true                     | 0        | Periodically publish odometry data over the network                                                                                                                                     | -                                                         |
* | GENERAL    | publish_location               | bool   | -     | true                     | 0        | PEriodically publish location data over the network                                                                                                                                     | -                                                         |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device localization2D_nws_yarp --GENERAL::period 0.01 --GENERAL::retrieve_position_periodically true --GENERAL::name /localization2D_nws_yarp --GENERAL::publish_odometry true --GENERAL::publish_location true
* \endcode
*
* \code{.unparsed}
* yarpdev --device localization2D_nws_yarp
* \endcode
*
*/

class Localization2D_nws_yarp_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    Localization2D_nws_yarp_ParamsParser();
    ~Localization2D_nws_yarp_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"Localization2D_nws_yarp"};
    const std::string m_device_name = {"localization2D_nws_yarp"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_GENERAL_period_defaultValue = {"0.01"};
    const std::string m_GENERAL_retrieve_position_periodically_defaultValue = {"true"};
    const std::string m_GENERAL_name_defaultValue = {"/localization2D_nws_yarp"};
    const std::string m_GENERAL_publish_odometry_defaultValue = {"true"};
    const std::string m_GENERAL_publish_location_defaultValue = {"true"};

    double m_GENERAL_period = {0.01};
    bool m_GENERAL_retrieve_position_periodically = {true};
    std::string m_GENERAL_name = {"/localization2D_nws_yarp"};
    bool m_GENERAL_publish_odometry = {true};
    bool m_GENERAL_publish_location = {true};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
