/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Mar  7 17:59:44 2024


#ifndef AUDIORECORDER_NWS_YARP_PARAMSPARSER_H
#define AUDIORECORDER_NWS_YARP_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class AudioRecorder_nws_yarp.
*
* These are the used parameters:
* | Group name | Parameter name           | Type   | Units   | Default Value      | Required | Description                                                                                 | Notes                                                                          |
* |:----------:|:------------------------:|:------:|:-------:|:------------------:|:--------:|:-------------------------------------------------------------------------------------------:|:------------------------------------------------------------------------------:|
* | -          | name                     | string | -       | /audioRecorder_nws | 0        | full name of the port opened by the device                                                  | MUST start with a '/' character, xxx/audio:o and xxx/rpc suffixes are appended |
* | -          | period                   | float  | s       | 0.02               | 0        | period of the internal thread, in ms                                                        | default 20ms                                                                   |
* | -          | debug                    | bool   | -       | false              | 0        | developers use only                                                                         | -                                                                              |
* | -          | min_samples_over_network | size_t | samples | 11250              | 0        | sends the network packet ifs n samples are collected AND the timeout is expired             | the algorithm is implemented in AudioRecorderDeviceBase::getSound() method     |
* | -          | max_samples_over_network | size_t | samples | 11250              | 0        | sends the network packet as soon as n samples have been collected                           | the algorithm is implemented in AudioRecorderDeviceBase::getSound() method     |
* | -          | max_samples_timeout      | float  | s       | 1.0                | 0        | timeout for sample collection                                                               | the algorithm is implemented in AudioRecorderDeviceBase::getSound() method     |
* | -          | start                    | bool   | -       | false              | 0        | automatically activates the recording when the device is started                            | if false, the recording is enabled via rpc port                                |
* | -          | send_sound_on_stop       | bool   | -       | true               | 0        | send the sound when the stop rpc is called, even if it does not met network size parameters | it will not send empty sounds                                                  |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device audioRecorder_nws_yarp --name /audioRecorder_nws --period 0.02 --debug false --min_samples_over_network 11250 --max_samples_over_network 11250 --max_samples_timeout 1.0 --start false --send_sound_on_stop true
* \endcode
*
* \code{.unparsed}
* yarpdev --device audioRecorder_nws_yarp
* \endcode
*
*/

class AudioRecorder_nws_yarp_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    AudioRecorder_nws_yarp_ParamsParser();
    ~AudioRecorder_nws_yarp_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"AudioRecorder_nws_yarp"};
    const std::string m_device_name = {"audioRecorder_nws_yarp"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_name_defaultValue = {"/audioRecorder_nws"};
    const std::string m_period_defaultValue = {"0.02"};
    const std::string m_debug_defaultValue = {"false"};
    const std::string m_min_samples_over_network_defaultValue = {"11250"};
    const std::string m_max_samples_over_network_defaultValue = {"11250"};
    const std::string m_getSound_timeout_defaultValue = {"1.0"};
    const std::string m_start_defaultValue = {"false"};
    const std::string m_send_sound_on_stop_defaultValue = {"true"};

    std::string m_name = {"/audioRecorder_nws"};
    float m_period = {0.02};
    bool m_debug = {false};
    size_t m_min_samples_over_network = {11250};
    size_t m_max_samples_over_network = {11250};
    float m_getSound_timeout = {1.0};
    bool m_start = {false};
    bool m_send_sound_on_stop = {true};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
