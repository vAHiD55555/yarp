/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Mar  7 17:59:44 2024


#include "AudioRecorder_nws_yarp_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(AudioRecorder_nws_yarpParamsCOMPONENT, "yarp.device.AudioRecorder_nws_yarp")
}


AudioRecorder_nws_yarp_ParamsParser::AudioRecorder_nws_yarp_ParamsParser()
{
}


std::vector<std::string> AudioRecorder_nws_yarp_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("name");
    params.push_back("period");
    params.push_back("debug");
    params.push_back("min_samples_over_network");
    params.push_back("max_samples_over_network");
    params.push_back("max_samples_timeout");
    params.push_back("start");
    params.push_back("send_sound_on_stop");
    return params;
}


bool      AudioRecorder_nws_yarp_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter name
    {
        if (config.check("name"))
        {
            m_name = config.find("name").asString();
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'name' using value:" << m_name;
        }
        else
        {
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'name' using DEFAULT value:" << m_name;
        }
        prop_check.unput("name");
    }

    //Parser of parameter period
    {
        if (config.check("period"))
        {
            m_period = config.find("period").asFloat32();
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'period' using value:" << m_period;
        }
        else
        {
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'period' using DEFAULT value:" << m_period;
        }
        prop_check.unput("period");
    }

    //Parser of parameter debug
    {
        if (config.check("debug"))
        {
            m_debug = config.find("debug").asBool();
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'debug' using value:" << m_debug;
        }
        else
        {
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'debug' using DEFAULT value:" << m_debug;
        }
        prop_check.unput("debug");
    }

    //Parser of parameter min_samples_over_network
    {
        if (config.check("min_samples_over_network"))
        {
            m_min_samples_over_network = config.find("min_samples_over_network").asInt64();
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'min_samples_over_network' using value:" << m_min_samples_over_network;
        }
        else
        {
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'min_samples_over_network' using DEFAULT value:" << m_min_samples_over_network;
        }
        prop_check.unput("min_samples_over_network");
    }

    //Parser of parameter max_samples_over_network
    {
        if (config.check("max_samples_over_network"))
        {
            m_max_samples_over_network = config.find("max_samples_over_network").asInt64();
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'max_samples_over_network' using value:" << m_max_samples_over_network;
        }
        else
        {
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'max_samples_over_network' using DEFAULT value:" << m_max_samples_over_network;
        }
        prop_check.unput("max_samples_over_network");
    }

    //Parser of parameter max_samples_timeout
    {
        if (config.check("max_samples_timeout"))
        {
            m_getSound_timeout = config.find("max_samples_timeout").asFloat32();
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'max_samples_timeout' using value:" << m_getSound_timeout;
        }
        else
        {
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'max_samples_timeout' using DEFAULT value:" << m_getSound_timeout;
        }
        prop_check.unput("max_samples_timeout");
    }

    //Parser of parameter start
    {
        if (config.check("start"))
        {
            m_start = config.find("start").asBool();
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'start' using value:" << m_start;
        }
        else
        {
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'start' using DEFAULT value:" << m_start;
        }
        prop_check.unput("start");
    }

    //Parser of parameter send_sound_on_stop
    {
        if (config.check("send_sound_on_stop"))
        {
            m_send_sound_on_stop = config.find("send_sound_on_stop").asBool();
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'send_sound_on_stop' using value:" << m_send_sound_on_stop;
        }
        else
        {
            yCInfo(AudioRecorder_nws_yarpParamsCOMPONENT) << "Parameter 'send_sound_on_stop' using DEFAULT value:" << m_send_sound_on_stop;
        }
        prop_check.unput("send_sound_on_stop");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(AudioRecorder_nws_yarpParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(AudioRecorder_nws_yarpParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      AudioRecorder_nws_yarp_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: AudioRecorder_nws_yarp\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'name': full name of the port opened by the device\n");
    doc = doc + std::string("'period': period of the internal thread, in ms\n");
    doc = doc + std::string("'debug': developers use only\n");
    doc = doc + std::string("'min_samples_over_network': sends the network packet ifs n samples are collected AND the timeout is expired\n");
    doc = doc + std::string("'max_samples_over_network': sends the network packet as soon as n samples have been collected\n");
    doc = doc + std::string("'max_samples_timeout': timeout for sample collection\n");
    doc = doc + std::string("'start': automatically activates the recording when the device is started\n");
    doc = doc + std::string("'send_sound_on_stop': send the sound when the stop rpc is called, even if it does not met network size parameters\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device audioRecorder_nws_yarp --name /audioRecorder_nws --period 0.02 --debug false --min_samples_over_network 11250 --max_samples_over_network 11250 --max_samples_timeout 1.0 --start false --send_sound_on_stop true\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device audioRecorder_nws_yarp\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
