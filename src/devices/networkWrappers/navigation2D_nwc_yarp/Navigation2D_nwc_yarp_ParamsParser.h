/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Mar  7 17:59:47 2024


#ifndef NAVIGATION2D_NWC_YARP_PARAMSPARSER_H
#define NAVIGATION2D_NWC_YARP_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class Navigation2D_nwc_yarp.
*
* These are the used parameters:
* | Group name | Parameter name       | Type   | Units | Default Value | Required | Description                                                                                                            | Notes |
* |:----------:|:--------------------:|:------:|:-----:|:-------------:|:--------:|:----------------------------------------------------------------------------------------------------------------------:|:-----:|
* | -          | local                | string | -     | -             | 1        | Full port name opened by the Navigation2D_nwc_yarp device.                                                             | -     |
* | -          | navigation_server    | string | -     | -             | 1        | Full port name of the port remotely opened by the Navigation server, to which the Navigation2D_nwc_yarp connects to.   | -     |
* | -          | map_locations_server | string | -     | -             | 1        | Full port name of the port remotely opened by the Map2DServer, to which the Navigation2D_nwc_yarp connects to.         | -     |
* | -          | localization_server  | string | -     | -             | 1        | Full port name of the port remotely opened by the Localization server, to which the Navigation2D_nwc_yarp connects to. | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device navigation2D_nwc_yarp --local <mandatory_value> --navigation_server <mandatory_value> --map_locations_server <mandatory_value> --localization_server <mandatory_value>
* \endcode
*
* \code{.unparsed}
* yarpdev --device navigation2D_nwc_yarp --local <mandatory_value> --navigation_server <mandatory_value> --map_locations_server <mandatory_value> --localization_server <mandatory_value>
* \endcode
*
*/

class Navigation2D_nwc_yarp_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    Navigation2D_nwc_yarp_ParamsParser();
    ~Navigation2D_nwc_yarp_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"Navigation2D_nwc_yarp"};
    const std::string m_device_name = {"navigation2D_nwc_yarp"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_local_defaultValue = {""};
    const std::string m_navigation_server_defaultValue = {""};
    const std::string m_map_locations_server_defaultValue = {""};
    const std::string m_localization_server_defaultValue = {""};

    std::string m_local = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::string m_navigation_server = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::string m_map_locations_server = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::string m_localization_server = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
