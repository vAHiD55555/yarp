/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Mar  7 17:59:42 2024


#ifndef FAKELASERWITHMOTOR_PARAMSPARSER_H
#define FAKELASERWITHMOTOR_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class FakeLaserWithMotor.
*
* These are the used parameters:
* | Group name    | Parameter name      | Type   | Units | Default Value                 | Required | Description                                                                     | Notes                                                                                                 |
* |:-------------:|:-------------------:|:------:|:-----:|:-----------------------------:|:--------:|:-------------------------------------------------------------------------------:|:-----------------------------------------------------------------------------------------------------:|
* | -             | test                | string | -     | use_pattern                   | 1        | Choose the modality                                                             | It can be one of the following: no_obstacles, use_pattern, use_mapfile, use_constant, use_square_trap |
* | -             | localization_port   | string | -     | /fakeLaser/location:i         | 0        | Full name of the port to which device connects to receive the localization data | -                                                                                                     |
* | -             | localization_server | string | -     | /localizationServer           | 0        | Full name of the port to which device connects to receive the localization data | -                                                                                                     |
* | -             | localization_client | string | -     | /fakeLaser/localizationClient | 0        | Full name of the local transformClient opened by the device                     | It cannot be used togheter if localization_port parameter is set                                      |
* | -             | localization_device | string | -     | localization2DClient          | 0        | Type of localization device, e.g. localization2DClient, localization2D_nwc_yarp | It cannot be used togheter if localization_port parameter is set                                      |
* | MAP_MODE      | map_file            | string | -     | -                             | 0        | Full path to a .map file                                                        | Mandatory if --test use_mapfile option has been set                                                   |
* | MAP_MODE      | map_context         | string | -     | -                             | 0        | Full path to a .map file                                                        | Mandatory if --test use_mapfile option has been set                                                   |
* | -             | clip_max            | double | m     | 3.5                           | 0        | Maximum detectable distance for an obstacle                                     | -                                                                                                     |
* | -             | clip_min            | double | m     | 0.1                           | 0        | Minimum detectable distance for an obstacle                                     | -                                                                                                     |
* | GENERAL       | period              | double | s     | 0.02                          | 0        | Thread period                                                                   | -                                                                                                     |
* | CONSTANT_MODE | const_distance      | double | m     | 1                             | 0        | Default const distance for mode use_constant                                    | -                                                                                                     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device fakeLaserWithMotor --test use_pattern --localization_port /fakeLaser/location:i --localization_server /localizationServer --localization_client /fakeLaser/localizationClient --localization_device localization2DClient --MAP_MODE::map_file <optional_value> --MAP_MODE::map_context <optional_value> --clip_max 3.5 --clip_min 0.1 --GENERAL::period 0.02 --CONSTANT_MODE::const_distance 1
* \endcode
*
* \code{.unparsed}
* yarpdev --device fakeLaserWithMotor --test use_pattern
* \endcode
*
*/

class FakeLaserWithMotor_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    FakeLaserWithMotor_ParamsParser();
    ~FakeLaserWithMotor_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"FakeLaserWithMotor"};
    const std::string m_device_name = {"fakeLaserWithMotor"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_test_defaultValue = {"use_pattern"};
    const std::string m_localization_port_defaultValue = {"/fakeLaser/location:i"};
    const std::string m_localization_server_defaultValue = {"/localizationServer"};
    const std::string m_localization_client_defaultValue = {"/fakeLaser/localizationClient"};
    const std::string m_localization_device_defaultValue = {"localization2DClient"};
    const std::string m_MAP_MODE_map_file_defaultValue = {""};
    const std::string m_MAP_MODE_map_context_defaultValue = {""};
    const std::string m_clip_max_defaultValue = {"3.5"};
    const std::string m_clip_min_defaultValue = {"0.1"};
    const std::string m_GENERAL_period_defaultValue = {"0.02"};
    const std::string m_CONSTANT_MODE_const_distance_defaultValue = {"1"};

    std::string m_test = {"use_pattern"};
    std::string m_localization_port = {"/fakeLaser/location:i"};
    std::string m_localization_server = {"/localizationServer"};
    std::string m_localization_client = {"/fakeLaser/localizationClient"};
    std::string m_localization_device = {"localization2DClient"};
    std::string m_MAP_MODE_map_file = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    std::string m_MAP_MODE_map_context = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    double m_clip_max = {3.5};
    double m_clip_min = {0.1};
    double m_GENERAL_period = {0.02};
    double m_CONSTANT_MODE_const_distance = {1};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
