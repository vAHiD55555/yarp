/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Mar  7 17:59:40 2024


#include "FakeDepthCameraDriver_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(FakeDepthCameraDriverParamsCOMPONENT, "yarp.device.FakeDepthCameraDriver")
}


FakeDepthCameraDriver_ParamsParser::FakeDepthCameraDriver_ParamsParser()
{
}


std::vector<std::string> FakeDepthCameraDriver_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("rgb_h");
    params.push_back("rgb_w");
    params.push_back("dep_h");
    params.push_back("dep_w");
    params.push_back("accuracy");
    params.push_back("rgb_Vfov");
    params.push_back("rgb_Hfov");
    params.push_back("dep_Vfov");
    params.push_back("dep_Hfov");
    params.push_back("dep_near");
    params.push_back("dep_far");
    return params;
}


bool      FakeDepthCameraDriver_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter rgb_h
    {
        if (config.check("rgb_h"))
        {
            m_rgb_h = config.find("rgb_h").asFloat64();
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'rgb_h' using value:" << m_rgb_h;
        }
        else
        {
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'rgb_h' using DEFAULT value:" << m_rgb_h;
        }
        prop_check.unput("rgb_h");
    }

    //Parser of parameter rgb_w
    {
        if (config.check("rgb_w"))
        {
            m_rgb_w = config.find("rgb_w").asFloat64();
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'rgb_w' using value:" << m_rgb_w;
        }
        else
        {
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'rgb_w' using DEFAULT value:" << m_rgb_w;
        }
        prop_check.unput("rgb_w");
    }

    //Parser of parameter dep_h
    {
        if (config.check("dep_h"))
        {
            m_dep_h = config.find("dep_h").asFloat64();
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'dep_h' using value:" << m_dep_h;
        }
        else
        {
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'dep_h' using DEFAULT value:" << m_dep_h;
        }
        prop_check.unput("dep_h");
    }

    //Parser of parameter dep_w
    {
        if (config.check("dep_w"))
        {
            m_dep_w = config.find("dep_w").asFloat64();
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'dep_w' using value:" << m_dep_w;
        }
        else
        {
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'dep_w' using DEFAULT value:" << m_dep_w;
        }
        prop_check.unput("dep_w");
    }

    //Parser of parameter accuracy
    {
        if (config.check("accuracy"))
        {
            m_accuracy = config.find("accuracy").asFloat64();
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'accuracy' using value:" << m_accuracy;
        }
        else
        {
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'accuracy' using DEFAULT value:" << m_accuracy;
        }
        prop_check.unput("accuracy");
    }

    //Parser of parameter rgb_Vfov
    {
        if (config.check("rgb_Vfov"))
        {
            m_rgb_Vfov = config.find("rgb_Vfov").asFloat64();
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'rgb_Vfov' using value:" << m_rgb_Vfov;
        }
        else
        {
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'rgb_Vfov' using DEFAULT value:" << m_rgb_Vfov;
        }
        prop_check.unput("rgb_Vfov");
    }

    //Parser of parameter rgb_Hfov
    {
        if (config.check("rgb_Hfov"))
        {
            m_rgb_Hfov = config.find("rgb_Hfov").asFloat64();
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'rgb_Hfov' using value:" << m_rgb_Hfov;
        }
        else
        {
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'rgb_Hfov' using DEFAULT value:" << m_rgb_Hfov;
        }
        prop_check.unput("rgb_Hfov");
    }

    //Parser of parameter dep_Vfov
    {
        if (config.check("dep_Vfov"))
        {
            m_dep_Vfov = config.find("dep_Vfov").asFloat64();
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'dep_Vfov' using value:" << m_dep_Vfov;
        }
        else
        {
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'dep_Vfov' using DEFAULT value:" << m_dep_Vfov;
        }
        prop_check.unput("dep_Vfov");
    }

    //Parser of parameter dep_Hfov
    {
        if (config.check("dep_Hfov"))
        {
            m_dep_Hfov = config.find("dep_Hfov").asFloat64();
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'dep_Hfov' using value:" << m_dep_Hfov;
        }
        else
        {
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'dep_Hfov' using DEFAULT value:" << m_dep_Hfov;
        }
        prop_check.unput("dep_Hfov");
    }

    //Parser of parameter dep_near
    {
        if (config.check("dep_near"))
        {
            m_dep_near = config.find("dep_near").asFloat64();
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'dep_near' using value:" << m_dep_near;
        }
        else
        {
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'dep_near' using DEFAULT value:" << m_dep_near;
        }
        prop_check.unput("dep_near");
    }

    //Parser of parameter dep_far
    {
        if (config.check("dep_far"))
        {
            m_dep_far = config.find("dep_far").asFloat64();
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'dep_far' using value:" << m_dep_far;
        }
        else
        {
            yCInfo(FakeDepthCameraDriverParamsCOMPONENT) << "Parameter 'dep_far' using DEFAULT value:" << m_dep_far;
        }
        prop_check.unput("dep_far");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(FakeDepthCameraDriverParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(FakeDepthCameraDriverParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      FakeDepthCameraDriver_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: FakeDepthCameraDriver\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'rgb_h': rgb_h\n");
    doc = doc + std::string("'rgb_w': rgb_w\n");
    doc = doc + std::string("'dep_h': dep_h\n");
    doc = doc + std::string("'dep_w': dep_w\n");
    doc = doc + std::string("'accuracy': accuracy\n");
    doc = doc + std::string("'rgb_Vfov': rgb_Vfov\n");
    doc = doc + std::string("'rgb_Hfov': rgb_Hfov\n");
    doc = doc + std::string("'dep_Vfov': dep_Vfov\n");
    doc = doc + std::string("'dep_Hfov': dep_Hfov\n");
    doc = doc + std::string("'dep_near': dep_near\n");
    doc = doc + std::string("'dep_far': dep_far\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device fakeDepthCamera --rgb_h 480.0 --rgb_w 640.0 --dep_h 480.0 --dep_w 640.0 --accuracy 0.001 --rgb_Vfov 50.0 --rgb_Hfov 36.0 --dep_Vfov 50.0 --dep_Hfov 36.0 --dep_near 0.2 --dep_far 6.0\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device fakeDepthCamera\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
