/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <IAudioGrabberMsgs.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

// setHWGain_RPC helper class declaration
class IAudioGrabberMsgs_setHWGain_RPC_helper :
        public yarp::os::Portable
{
public:
    IAudioGrabberMsgs_setHWGain_RPC_helper() = default;
    explicit IAudioGrabberMsgs_setHWGain_RPC_helper(const double gain);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double gain);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double gain{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double);
    void call(IAudioGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setHWGain_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool IAudioGrabberMsgs::setHWGain_RPC(const double gain)"};
    static constexpr const char* s_help{""};
};

// setSWGain_RPC helper class declaration
class IAudioGrabberMsgs_setSWGain_RPC_helper :
        public yarp::os::Portable
{
public:
    IAudioGrabberMsgs_setSWGain_RPC_helper() = default;
    explicit IAudioGrabberMsgs_setSWGain_RPC_helper(const double gain);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double gain);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double gain{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double);
    void call(IAudioGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setSWGain_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool IAudioGrabberMsgs::setSWGain_RPC(const double gain)"};
    static constexpr const char* s_help{""};
};

// resetRecordingAudioBuffer_RPC helper class declaration
class IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper :
        public yarp::os::Portable
{
public:
    IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(IAudioGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"resetRecordingAudioBuffer_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool IAudioGrabberMsgs::resetRecordingAudioBuffer_RPC()"};
    static constexpr const char* s_help{""};
};

// startRecording_RPC helper class declaration
class IAudioGrabberMsgs_startRecording_RPC_helper :
        public yarp::os::Portable
{
public:
    IAudioGrabberMsgs_startRecording_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(IAudioGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"startRecording_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool IAudioGrabberMsgs::startRecording_RPC()"};
    static constexpr const char* s_help{""};
};

// stopRecording_RPC helper class declaration
class IAudioGrabberMsgs_stopRecording_RPC_helper :
        public yarp::os::Portable
{
public:
    IAudioGrabberMsgs_stopRecording_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(IAudioGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"stopRecording_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool IAudioGrabberMsgs::stopRecording_RPC()"};
    static constexpr const char* s_help{""};
};

// isRecording_RPC helper class declaration
class IAudioGrabberMsgs_isRecording_RPC_helper :
        public yarp::os::Portable
{
public:
    IAudioGrabberMsgs_isRecording_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_isRecording return_helper{};
    };

    using funcptr_t = return_isRecording (*)();
    void call(IAudioGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"isRecording_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_isRecording IAudioGrabberMsgs::isRecording_RPC()"};
    static constexpr const char* s_help{""};
};

// getSound_RPC helper class declaration
class IAudioGrabberMsgs_getSound_RPC_helper :
        public yarp::os::Portable
{
public:
    IAudioGrabberMsgs_getSound_RPC_helper() = default;
    IAudioGrabberMsgs_getSound_RPC_helper(const size_t min_number_of_samples, const size_t max_number_of_samples, const double max_samples_timeout_s);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const size_t min_number_of_samples, const size_t max_number_of_samples, const double max_samples_timeout_s);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        size_t min_number_of_samples{0};
        size_t max_number_of_samples{0};
        double max_samples_timeout_s{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_getSound return_helper{};
    };

    using funcptr_t = return_getSound (*)(const size_t, const size_t, const double);
    void call(IAudioGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getSound_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{5};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_getSound IAudioGrabberMsgs::getSound_RPC(const size_t min_number_of_samples, const size_t max_number_of_samples, const double max_samples_timeout_s)"};
    static constexpr const char* s_help{""};
};

// getRecordingAudioBufferMaxSize_RPC helper class declaration
class IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper :
        public yarp::os::Portable
{
public:
    IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_getRecordingAudioBufferMaxSize return_helper{};
    };

    using funcptr_t = return_getRecordingAudioBufferMaxSize (*)();
    void call(IAudioGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getRecordingAudioBufferMaxSize_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_getRecordingAudioBufferMaxSize IAudioGrabberMsgs::getRecordingAudioBufferMaxSize_RPC()"};
    static constexpr const char* s_help{""};
};

// getRecordingAudioBufferCurrentSize_RPC helper class declaration
class IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper :
        public yarp::os::Portable
{
public:
    IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_getRecordingAudioBufferCurrentSize return_helper{};
    };

    using funcptr_t = return_getRecordingAudioBufferCurrentSize (*)();
    void call(IAudioGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getRecordingAudioBufferCurrentSize_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_getRecordingAudioBufferCurrentSize IAudioGrabberMsgs::getRecordingAudioBufferCurrentSize_RPC()"};
    static constexpr const char* s_help{""};
};

// setHWGain_RPC helper class implementation
IAudioGrabberMsgs_setHWGain_RPC_helper::IAudioGrabberMsgs_setHWGain_RPC_helper(const double gain) :
        cmd{gain}
{
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

IAudioGrabberMsgs_setHWGain_RPC_helper::Command::Command(const double gain) :
        gain{gain}
{
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(gain)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(gain)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IAudioGrabberMsgs_setHWGain_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IAudioGrabberMsgs_setHWGain_RPC_helper::call(IAudioGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setHWGain_RPC(cmd.gain);
}

// setSWGain_RPC helper class implementation
IAudioGrabberMsgs_setSWGain_RPC_helper::IAudioGrabberMsgs_setSWGain_RPC_helper(const double gain) :
        cmd{gain}
{
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

IAudioGrabberMsgs_setSWGain_RPC_helper::Command::Command(const double gain) :
        gain{gain}
{
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(gain)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(gain)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IAudioGrabberMsgs_setSWGain_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IAudioGrabberMsgs_setSWGain_RPC_helper::call(IAudioGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setSWGain_RPC(cmd.gain);
}

// resetRecordingAudioBuffer_RPC helper class implementation
bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::call(IAudioGrabberMsgs* ptr)
{
    reply.return_helper = ptr->resetRecordingAudioBuffer_RPC();
}

// startRecording_RPC helper class implementation
bool IAudioGrabberMsgs_startRecording_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IAudioGrabberMsgs_startRecording_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IAudioGrabberMsgs_startRecording_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IAudioGrabberMsgs_startRecording_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IAudioGrabberMsgs_startRecording_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_startRecording_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_startRecording_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IAudioGrabberMsgs_startRecording_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_startRecording_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_startRecording_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_startRecording_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IAudioGrabberMsgs_startRecording_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IAudioGrabberMsgs_startRecording_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IAudioGrabberMsgs_startRecording_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IAudioGrabberMsgs_startRecording_RPC_helper::call(IAudioGrabberMsgs* ptr)
{
    reply.return_helper = ptr->startRecording_RPC();
}

// stopRecording_RPC helper class implementation
bool IAudioGrabberMsgs_stopRecording_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IAudioGrabberMsgs_stopRecording_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IAudioGrabberMsgs_stopRecording_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IAudioGrabberMsgs_stopRecording_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IAudioGrabberMsgs_stopRecording_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_stopRecording_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_stopRecording_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IAudioGrabberMsgs_stopRecording_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_stopRecording_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_stopRecording_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_stopRecording_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IAudioGrabberMsgs_stopRecording_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IAudioGrabberMsgs_stopRecording_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IAudioGrabberMsgs_stopRecording_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IAudioGrabberMsgs_stopRecording_RPC_helper::call(IAudioGrabberMsgs* ptr)
{
    reply.return_helper = ptr->stopRecording_RPC();
}

// isRecording_RPC helper class implementation
bool IAudioGrabberMsgs_isRecording_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IAudioGrabberMsgs_isRecording_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IAudioGrabberMsgs_isRecording_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IAudioGrabberMsgs_isRecording_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IAudioGrabberMsgs_isRecording_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_isRecording_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_isRecording_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IAudioGrabberMsgs_isRecording_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_isRecording_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_isRecording_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_isRecording_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IAudioGrabberMsgs_isRecording_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IAudioGrabberMsgs_isRecording_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IAudioGrabberMsgs_isRecording_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IAudioGrabberMsgs_isRecording_RPC_helper::call(IAudioGrabberMsgs* ptr)
{
    reply.return_helper = ptr->isRecording_RPC();
}

// getSound_RPC helper class implementation
IAudioGrabberMsgs_getSound_RPC_helper::IAudioGrabberMsgs_getSound_RPC_helper(const size_t min_number_of_samples, const size_t max_number_of_samples, const double max_samples_timeout_s) :
        cmd{min_number_of_samples, max_number_of_samples, max_samples_timeout_s}
{
}

bool IAudioGrabberMsgs_getSound_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IAudioGrabberMsgs_getSound_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

IAudioGrabberMsgs_getSound_RPC_helper::Command::Command(const size_t min_number_of_samples, const size_t max_number_of_samples, const double max_samples_timeout_s) :
        min_number_of_samples{min_number_of_samples},
        max_number_of_samples{max_number_of_samples},
        max_samples_timeout_s{max_samples_timeout_s}
{
}

bool IAudioGrabberMsgs_getSound_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IAudioGrabberMsgs_getSound_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IAudioGrabberMsgs_getSound_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getSound_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getSound_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeSizeT(min_number_of_samples)) {
        return false;
    }
    if (!writer.writeSizeT(max_number_of_samples)) {
        return false;
    }
    if (!writer.writeFloat64(max_samples_timeout_s)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getSound_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getSound_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getSound_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readSizeT(min_number_of_samples)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readSizeT(max_number_of_samples)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(max_samples_timeout_s)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getSound_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IAudioGrabberMsgs_getSound_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IAudioGrabberMsgs_getSound_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IAudioGrabberMsgs_getSound_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IAudioGrabberMsgs_getSound_RPC_helper::call(IAudioGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getSound_RPC(cmd.min_number_of_samples, cmd.max_number_of_samples, cmd.max_samples_timeout_s);
}

// getRecordingAudioBufferMaxSize_RPC helper class implementation
bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::call(IAudioGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getRecordingAudioBufferMaxSize_RPC();
}

// getRecordingAudioBufferCurrentSize_RPC helper class implementation
bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::call(IAudioGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getRecordingAudioBufferCurrentSize_RPC();
}

// Constructor
IAudioGrabberMsgs::IAudioGrabberMsgs()
{
    yarp().setOwner(*this);
}

bool IAudioGrabberMsgs::setHWGain_RPC(const double gain)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IAudioGrabberMsgs_setHWGain_RPC_helper::s_prototype);
    }
    IAudioGrabberMsgs_setHWGain_RPC_helper helper{gain};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool IAudioGrabberMsgs::setSWGain_RPC(const double gain)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IAudioGrabberMsgs_setSWGain_RPC_helper::s_prototype);
    }
    IAudioGrabberMsgs_setSWGain_RPC_helper helper{gain};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool IAudioGrabberMsgs::resetRecordingAudioBuffer_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::s_prototype);
    }
    IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool IAudioGrabberMsgs::startRecording_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IAudioGrabberMsgs_startRecording_RPC_helper::s_prototype);
    }
    IAudioGrabberMsgs_startRecording_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool IAudioGrabberMsgs::stopRecording_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IAudioGrabberMsgs_stopRecording_RPC_helper::s_prototype);
    }
    IAudioGrabberMsgs_stopRecording_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

return_isRecording IAudioGrabberMsgs::isRecording_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IAudioGrabberMsgs_isRecording_RPC_helper::s_prototype);
    }
    IAudioGrabberMsgs_isRecording_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_isRecording{};
}

return_getSound IAudioGrabberMsgs::getSound_RPC(const size_t min_number_of_samples, const size_t max_number_of_samples, const double max_samples_timeout_s)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IAudioGrabberMsgs_getSound_RPC_helper::s_prototype);
    }
    IAudioGrabberMsgs_getSound_RPC_helper helper{min_number_of_samples, max_number_of_samples, max_samples_timeout_s};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_getSound{};
}

return_getRecordingAudioBufferMaxSize IAudioGrabberMsgs::getRecordingAudioBufferMaxSize_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::s_prototype);
    }
    IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_getRecordingAudioBufferMaxSize{};
}

return_getRecordingAudioBufferCurrentSize IAudioGrabberMsgs::getRecordingAudioBufferCurrentSize_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::s_prototype);
    }
    IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_getRecordingAudioBufferCurrentSize{};
}

// help method
std::vector<std::string> IAudioGrabberMsgs::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(IAudioGrabberMsgs_setHWGain_RPC_helper::s_tag);
        helpString.emplace_back(IAudioGrabberMsgs_setSWGain_RPC_helper::s_tag);
        helpString.emplace_back(IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::s_tag);
        helpString.emplace_back(IAudioGrabberMsgs_startRecording_RPC_helper::s_tag);
        helpString.emplace_back(IAudioGrabberMsgs_stopRecording_RPC_helper::s_tag);
        helpString.emplace_back(IAudioGrabberMsgs_isRecording_RPC_helper::s_tag);
        helpString.emplace_back(IAudioGrabberMsgs_getSound_RPC_helper::s_tag);
        helpString.emplace_back(IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::s_tag);
        helpString.emplace_back(IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == IAudioGrabberMsgs_setHWGain_RPC_helper::s_tag) {
            helpString.emplace_back(IAudioGrabberMsgs_setHWGain_RPC_helper::s_prototype);
        }
        if (functionName == IAudioGrabberMsgs_setSWGain_RPC_helper::s_tag) {
            helpString.emplace_back(IAudioGrabberMsgs_setSWGain_RPC_helper::s_prototype);
        }
        if (functionName == IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::s_tag) {
            helpString.emplace_back(IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::s_prototype);
        }
        if (functionName == IAudioGrabberMsgs_startRecording_RPC_helper::s_tag) {
            helpString.emplace_back(IAudioGrabberMsgs_startRecording_RPC_helper::s_prototype);
        }
        if (functionName == IAudioGrabberMsgs_stopRecording_RPC_helper::s_tag) {
            helpString.emplace_back(IAudioGrabberMsgs_stopRecording_RPC_helper::s_prototype);
        }
        if (functionName == IAudioGrabberMsgs_isRecording_RPC_helper::s_tag) {
            helpString.emplace_back(IAudioGrabberMsgs_isRecording_RPC_helper::s_prototype);
        }
        if (functionName == IAudioGrabberMsgs_getSound_RPC_helper::s_tag) {
            helpString.emplace_back(IAudioGrabberMsgs_getSound_RPC_helper::s_prototype);
        }
        if (functionName == IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::s_tag) {
            helpString.emplace_back(IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::s_prototype);
        }
        if (functionName == IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::s_tag) {
            helpString.emplace_back(IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::s_prototype);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool IAudioGrabberMsgs::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 2;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if (tag == IAudioGrabberMsgs_setHWGain_RPC_helper::s_tag) {
            IAudioGrabberMsgs_setHWGain_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IAudioGrabberMsgs_setSWGain_RPC_helper::s_tag) {
            IAudioGrabberMsgs_setSWGain_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper::s_tag) {
            IAudioGrabberMsgs_resetRecordingAudioBuffer_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IAudioGrabberMsgs_startRecording_RPC_helper::s_tag) {
            IAudioGrabberMsgs_startRecording_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IAudioGrabberMsgs_stopRecording_RPC_helper::s_tag) {
            IAudioGrabberMsgs_stopRecording_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IAudioGrabberMsgs_isRecording_RPC_helper::s_tag) {
            IAudioGrabberMsgs_isRecording_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IAudioGrabberMsgs_getSound_RPC_helper::s_tag) {
            IAudioGrabberMsgs_getSound_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper::s_tag) {
            IAudioGrabberMsgs_getRecordingAudioBufferMaxSize_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper::s_tag) {
            IAudioGrabberMsgs_getRecordingAudioBufferCurrentSize_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}
