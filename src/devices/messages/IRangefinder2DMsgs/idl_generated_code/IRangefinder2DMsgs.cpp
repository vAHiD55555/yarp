/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <IRangefinder2DMsgs.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

// getDeviceStatus_RPC helper class declaration
class IRangefinder2DMsgs_getDeviceStatus_RPC_helper :
        public yarp::os::Portable
{
public:
    IRangefinder2DMsgs_getDeviceStatus_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_getDeviceStatus return_helper{};
    };

    using funcptr_t = return_getDeviceStatus (*)();
    void call(IRangefinder2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getDeviceStatus_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_getDeviceStatus IRangefinder2DMsgs::getDeviceStatus_RPC()"};
    static constexpr const char* s_help{""};
};

// getDistanceRange_RPC helper class declaration
class IRangefinder2DMsgs_getDistanceRange_RPC_helper :
        public yarp::os::Portable
{
public:
    IRangefinder2DMsgs_getDistanceRange_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_getDistanceRange return_helper{};
    };

    using funcptr_t = return_getDistanceRange (*)();
    void call(IRangefinder2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getDistanceRange_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{3};
    static constexpr const char* s_prototype{"return_getDistanceRange IRangefinder2DMsgs::getDistanceRange_RPC()"};
    static constexpr const char* s_help{""};
};

// getScanLimits_RPC helper class declaration
class IRangefinder2DMsgs_getScanLimits_RPC_helper :
        public yarp::os::Portable
{
public:
    IRangefinder2DMsgs_getScanLimits_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_getScanLimits return_helper{};
    };

    using funcptr_t = return_getScanLimits (*)();
    void call(IRangefinder2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getScanLimits_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{3};
    static constexpr const char* s_prototype{"return_getScanLimits IRangefinder2DMsgs::getScanLimits_RPC()"};
    static constexpr const char* s_help{""};
};

// getHorizontalResolution_RPC helper class declaration
class IRangefinder2DMsgs_getHorizontalResolution_RPC_helper :
        public yarp::os::Portable
{
public:
    IRangefinder2DMsgs_getHorizontalResolution_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_getHorizontalResolution return_helper{};
    };

    using funcptr_t = return_getHorizontalResolution (*)();
    void call(IRangefinder2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getHorizontalResolution_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_getHorizontalResolution IRangefinder2DMsgs::getHorizontalResolution_RPC()"};
    static constexpr const char* s_help{""};
};

// getScanRate_RPC helper class declaration
class IRangefinder2DMsgs_getScanRate_RPC_helper :
        public yarp::os::Portable
{
public:
    IRangefinder2DMsgs_getScanRate_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_getScanRate return_helper{};
    };

    using funcptr_t = return_getScanRate (*)();
    void call(IRangefinder2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getScanRate_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_getScanRate IRangefinder2DMsgs::getScanRate_RPC()"};
    static constexpr const char* s_help{""};
};

// getDeviceInfo_RPC helper class declaration
class IRangefinder2DMsgs_getDeviceInfo_RPC_helper :
        public yarp::os::Portable
{
public:
    IRangefinder2DMsgs_getDeviceInfo_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_getDeviceInfo return_helper{};
    };

    using funcptr_t = return_getDeviceInfo (*)();
    void call(IRangefinder2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getDeviceInfo_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_getDeviceInfo IRangefinder2DMsgs::getDeviceInfo_RPC()"};
    static constexpr const char* s_help{""};
};

// setDistanceRange_RPC helper class declaration
class IRangefinder2DMsgs_setDistanceRange_RPC_helper :
        public yarp::os::Portable
{
public:
    IRangefinder2DMsgs_setDistanceRange_RPC_helper() = default;
    IRangefinder2DMsgs_setDistanceRange_RPC_helper(const double min, const double max);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double min, const double max);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double min{0.0};
        double max{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double, const double);
    void call(IRangefinder2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setDistanceRange_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{4};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool IRangefinder2DMsgs::setDistanceRange_RPC(const double min, const double max)"};
    static constexpr const char* s_help{""};
};

// setScanLimits_RPC helper class declaration
class IRangefinder2DMsgs_setScanLimits_RPC_helper :
        public yarp::os::Portable
{
public:
    IRangefinder2DMsgs_setScanLimits_RPC_helper() = default;
    IRangefinder2DMsgs_setScanLimits_RPC_helper(const double min, const double max);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double min, const double max);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double min{0.0};
        double max{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double, const double);
    void call(IRangefinder2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setScanLimits_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{4};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool IRangefinder2DMsgs::setScanLimits_RPC(const double min, const double max)"};
    static constexpr const char* s_help{""};
};

// setHorizontalResolution_RPC helper class declaration
class IRangefinder2DMsgs_setHorizontalResolution_RPC_helper :
        public yarp::os::Portable
{
public:
    IRangefinder2DMsgs_setHorizontalResolution_RPC_helper() = default;
    explicit IRangefinder2DMsgs_setHorizontalResolution_RPC_helper(const double step);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double step);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double step{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double);
    void call(IRangefinder2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setHorizontalResolution_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool IRangefinder2DMsgs::setHorizontalResolution_RPC(const double step)"};
    static constexpr const char* s_help{""};
};

// setScanRate_RPC helper class declaration
class IRangefinder2DMsgs_setScanRate_RPC_helper :
        public yarp::os::Portable
{
public:
    IRangefinder2DMsgs_setScanRate_RPC_helper() = default;
    explicit IRangefinder2DMsgs_setScanRate_RPC_helper(const double rate);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double rate);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double rate{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double);
    void call(IRangefinder2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setScanRate_RPC"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool IRangefinder2DMsgs::setScanRate_RPC(const double rate)"};
    static constexpr const char* s_help{""};
};

// getDeviceStatus_RPC helper class implementation
bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRangefinder2DMsgs_getDeviceStatus_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRangefinder2DMsgs_getDeviceStatus_RPC_helper::call(IRangefinder2DMsgs* ptr)
{
    reply.return_helper = ptr->getDeviceStatus_RPC();
}

// getDistanceRange_RPC helper class implementation
bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRangefinder2DMsgs_getDistanceRange_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRangefinder2DMsgs_getDistanceRange_RPC_helper::call(IRangefinder2DMsgs* ptr)
{
    reply.return_helper = ptr->getDistanceRange_RPC();
}

// getScanLimits_RPC helper class implementation
bool IRangefinder2DMsgs_getScanLimits_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRangefinder2DMsgs_getScanLimits_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IRangefinder2DMsgs_getScanLimits_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRangefinder2DMsgs_getScanLimits_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRangefinder2DMsgs_getScanLimits_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getScanLimits_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getScanLimits_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IRangefinder2DMsgs_getScanLimits_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getScanLimits_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getScanLimits_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getScanLimits_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRangefinder2DMsgs_getScanLimits_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRangefinder2DMsgs_getScanLimits_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRangefinder2DMsgs_getScanLimits_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRangefinder2DMsgs_getScanLimits_RPC_helper::call(IRangefinder2DMsgs* ptr)
{
    reply.return_helper = ptr->getScanLimits_RPC();
}

// getHorizontalResolution_RPC helper class implementation
bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::call(IRangefinder2DMsgs* ptr)
{
    reply.return_helper = ptr->getHorizontalResolution_RPC();
}

// getScanRate_RPC helper class implementation
bool IRangefinder2DMsgs_getScanRate_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRangefinder2DMsgs_getScanRate_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IRangefinder2DMsgs_getScanRate_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRangefinder2DMsgs_getScanRate_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRangefinder2DMsgs_getScanRate_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getScanRate_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getScanRate_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IRangefinder2DMsgs_getScanRate_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getScanRate_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getScanRate_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getScanRate_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRangefinder2DMsgs_getScanRate_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRangefinder2DMsgs_getScanRate_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRangefinder2DMsgs_getScanRate_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRangefinder2DMsgs_getScanRate_RPC_helper::call(IRangefinder2DMsgs* ptr)
{
    reply.return_helper = ptr->getScanRate_RPC();
}

// getDeviceInfo_RPC helper class implementation
bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRangefinder2DMsgs_getDeviceInfo_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRangefinder2DMsgs_getDeviceInfo_RPC_helper::call(IRangefinder2DMsgs* ptr)
{
    reply.return_helper = ptr->getDeviceInfo_RPC();
}

// setDistanceRange_RPC helper class implementation
IRangefinder2DMsgs_setDistanceRange_RPC_helper::IRangefinder2DMsgs_setDistanceRange_RPC_helper(const double min, const double max) :
        cmd{min, max}
{
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

IRangefinder2DMsgs_setDistanceRange_RPC_helper::Command::Command(const double min, const double max) :
        min{min},
        max{max}
{
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(min)) {
        return false;
    }
    if (!writer.writeFloat64(max)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(min)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(max)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRangefinder2DMsgs_setDistanceRange_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRangefinder2DMsgs_setDistanceRange_RPC_helper::call(IRangefinder2DMsgs* ptr)
{
    reply.return_helper = ptr->setDistanceRange_RPC(cmd.min, cmd.max);
}

// setScanLimits_RPC helper class implementation
IRangefinder2DMsgs_setScanLimits_RPC_helper::IRangefinder2DMsgs_setScanLimits_RPC_helper(const double min, const double max) :
        cmd{min, max}
{
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

IRangefinder2DMsgs_setScanLimits_RPC_helper::Command::Command(const double min, const double max) :
        min{min},
        max{max}
{
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(min)) {
        return false;
    }
    if (!writer.writeFloat64(max)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(min)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(max)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRangefinder2DMsgs_setScanLimits_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRangefinder2DMsgs_setScanLimits_RPC_helper::call(IRangefinder2DMsgs* ptr)
{
    reply.return_helper = ptr->setScanLimits_RPC(cmd.min, cmd.max);
}

// setHorizontalResolution_RPC helper class implementation
IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::IRangefinder2DMsgs_setHorizontalResolution_RPC_helper(const double step) :
        cmd{step}
{
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::Command::Command(const double step) :
        step{step}
{
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(step)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(step)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::call(IRangefinder2DMsgs* ptr)
{
    reply.return_helper = ptr->setHorizontalResolution_RPC(cmd.step);
}

// setScanRate_RPC helper class implementation
IRangefinder2DMsgs_setScanRate_RPC_helper::IRangefinder2DMsgs_setScanRate_RPC_helper(const double rate) :
        cmd{rate}
{
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

IRangefinder2DMsgs_setScanRate_RPC_helper::Command::Command(const double rate) :
        rate{rate}
{
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(rate)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(rate)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool IRangefinder2DMsgs_setScanRate_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void IRangefinder2DMsgs_setScanRate_RPC_helper::call(IRangefinder2DMsgs* ptr)
{
    reply.return_helper = ptr->setScanRate_RPC(cmd.rate);
}

// Constructor
IRangefinder2DMsgs::IRangefinder2DMsgs()
{
    yarp().setOwner(*this);
}

return_getDeviceStatus IRangefinder2DMsgs::getDeviceStatus_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRangefinder2DMsgs_getDeviceStatus_RPC_helper::s_prototype);
    }
    IRangefinder2DMsgs_getDeviceStatus_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_getDeviceStatus{};
}

return_getDistanceRange IRangefinder2DMsgs::getDistanceRange_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRangefinder2DMsgs_getDistanceRange_RPC_helper::s_prototype);
    }
    IRangefinder2DMsgs_getDistanceRange_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_getDistanceRange{};
}

return_getScanLimits IRangefinder2DMsgs::getScanLimits_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRangefinder2DMsgs_getScanLimits_RPC_helper::s_prototype);
    }
    IRangefinder2DMsgs_getScanLimits_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_getScanLimits{};
}

return_getHorizontalResolution IRangefinder2DMsgs::getHorizontalResolution_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::s_prototype);
    }
    IRangefinder2DMsgs_getHorizontalResolution_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_getHorizontalResolution{};
}

return_getScanRate IRangefinder2DMsgs::getScanRate_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRangefinder2DMsgs_getScanRate_RPC_helper::s_prototype);
    }
    IRangefinder2DMsgs_getScanRate_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_getScanRate{};
}

return_getDeviceInfo IRangefinder2DMsgs::getDeviceInfo_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRangefinder2DMsgs_getDeviceInfo_RPC_helper::s_prototype);
    }
    IRangefinder2DMsgs_getDeviceInfo_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_getDeviceInfo{};
}

bool IRangefinder2DMsgs::setDistanceRange_RPC(const double min, const double max)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRangefinder2DMsgs_setDistanceRange_RPC_helper::s_prototype);
    }
    IRangefinder2DMsgs_setDistanceRange_RPC_helper helper{min, max};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool IRangefinder2DMsgs::setScanLimits_RPC(const double min, const double max)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRangefinder2DMsgs_setScanLimits_RPC_helper::s_prototype);
    }
    IRangefinder2DMsgs_setScanLimits_RPC_helper helper{min, max};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool IRangefinder2DMsgs::setHorizontalResolution_RPC(const double step)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::s_prototype);
    }
    IRangefinder2DMsgs_setHorizontalResolution_RPC_helper helper{step};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

bool IRangefinder2DMsgs::setScanRate_RPC(const double rate)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", IRangefinder2DMsgs_setScanRate_RPC_helper::s_prototype);
    }
    IRangefinder2DMsgs_setScanRate_RPC_helper helper{rate};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

// help method
std::vector<std::string> IRangefinder2DMsgs::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(IRangefinder2DMsgs_getDeviceStatus_RPC_helper::s_tag);
        helpString.emplace_back(IRangefinder2DMsgs_getDistanceRange_RPC_helper::s_tag);
        helpString.emplace_back(IRangefinder2DMsgs_getScanLimits_RPC_helper::s_tag);
        helpString.emplace_back(IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::s_tag);
        helpString.emplace_back(IRangefinder2DMsgs_getScanRate_RPC_helper::s_tag);
        helpString.emplace_back(IRangefinder2DMsgs_getDeviceInfo_RPC_helper::s_tag);
        helpString.emplace_back(IRangefinder2DMsgs_setDistanceRange_RPC_helper::s_tag);
        helpString.emplace_back(IRangefinder2DMsgs_setScanLimits_RPC_helper::s_tag);
        helpString.emplace_back(IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::s_tag);
        helpString.emplace_back(IRangefinder2DMsgs_setScanRate_RPC_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == IRangefinder2DMsgs_getDeviceStatus_RPC_helper::s_tag) {
            helpString.emplace_back(IRangefinder2DMsgs_getDeviceStatus_RPC_helper::s_prototype);
        }
        if (functionName == IRangefinder2DMsgs_getDistanceRange_RPC_helper::s_tag) {
            helpString.emplace_back(IRangefinder2DMsgs_getDistanceRange_RPC_helper::s_prototype);
        }
        if (functionName == IRangefinder2DMsgs_getScanLimits_RPC_helper::s_tag) {
            helpString.emplace_back(IRangefinder2DMsgs_getScanLimits_RPC_helper::s_prototype);
        }
        if (functionName == IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::s_tag) {
            helpString.emplace_back(IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::s_prototype);
        }
        if (functionName == IRangefinder2DMsgs_getScanRate_RPC_helper::s_tag) {
            helpString.emplace_back(IRangefinder2DMsgs_getScanRate_RPC_helper::s_prototype);
        }
        if (functionName == IRangefinder2DMsgs_getDeviceInfo_RPC_helper::s_tag) {
            helpString.emplace_back(IRangefinder2DMsgs_getDeviceInfo_RPC_helper::s_prototype);
        }
        if (functionName == IRangefinder2DMsgs_setDistanceRange_RPC_helper::s_tag) {
            helpString.emplace_back(IRangefinder2DMsgs_setDistanceRange_RPC_helper::s_prototype);
        }
        if (functionName == IRangefinder2DMsgs_setScanLimits_RPC_helper::s_tag) {
            helpString.emplace_back(IRangefinder2DMsgs_setScanLimits_RPC_helper::s_prototype);
        }
        if (functionName == IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::s_tag) {
            helpString.emplace_back(IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::s_prototype);
        }
        if (functionName == IRangefinder2DMsgs_setScanRate_RPC_helper::s_tag) {
            helpString.emplace_back(IRangefinder2DMsgs_setScanRate_RPC_helper::s_prototype);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool IRangefinder2DMsgs::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 2;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if (tag == IRangefinder2DMsgs_getDeviceStatus_RPC_helper::s_tag) {
            IRangefinder2DMsgs_getDeviceStatus_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRangefinder2DMsgs_getDistanceRange_RPC_helper::s_tag) {
            IRangefinder2DMsgs_getDistanceRange_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRangefinder2DMsgs_getScanLimits_RPC_helper::s_tag) {
            IRangefinder2DMsgs_getScanLimits_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRangefinder2DMsgs_getHorizontalResolution_RPC_helper::s_tag) {
            IRangefinder2DMsgs_getHorizontalResolution_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRangefinder2DMsgs_getScanRate_RPC_helper::s_tag) {
            IRangefinder2DMsgs_getScanRate_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRangefinder2DMsgs_getDeviceInfo_RPC_helper::s_tag) {
            IRangefinder2DMsgs_getDeviceInfo_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRangefinder2DMsgs_setDistanceRange_RPC_helper::s_tag) {
            IRangefinder2DMsgs_setDistanceRange_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRangefinder2DMsgs_setScanLimits_RPC_helper::s_tag) {
            IRangefinder2DMsgs_setScanLimits_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRangefinder2DMsgs_setHorizontalResolution_RPC_helper::s_tag) {
            IRangefinder2DMsgs_setHorizontalResolution_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == IRangefinder2DMsgs_setScanRate_RPC_helper::s_tag) {
            IRangefinder2DMsgs_setScanRate_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}
