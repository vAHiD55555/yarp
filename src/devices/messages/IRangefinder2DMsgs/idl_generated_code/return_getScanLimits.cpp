/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <return_getScanLimits.h>

// Constructor with field values
return_getScanLimits::return_getScanLimits(const bool retval,
                                           const double min,
                                           const double max) :
        WirePortable(),
        retval(retval),
        min(min),
        max(max)
{
}

// Read structure on a Wire
bool return_getScanLimits::read(yarp::os::idl::WireReader& reader)
{
    if (!read_retval(reader)) {
        return false;
    }
    if (!read_min(reader)) {
        return false;
    }
    if (!read_max(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool return_getScanLimits::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(3)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool return_getScanLimits::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_retval(writer)) {
        return false;
    }
    if (!write_min(writer)) {
        return false;
    }
    if (!write_max(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool return_getScanLimits::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string return_getScanLimits::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read retval field
bool return_getScanLimits::read_retval(yarp::os::idl::WireReader& reader)
{
    if (!reader.readBool(retval)) {
        retval = false;
    }
    return true;
}

// write retval field
bool return_getScanLimits::write_retval(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(retval)) {
        return false;
    }
    return true;
}

// read (nested) retval field
bool return_getScanLimits::nested_read_retval(yarp::os::idl::WireReader& reader)
{
    if (!reader.readBool(retval)) {
        retval = false;
    }
    return true;
}

// write (nested) retval field
bool return_getScanLimits::nested_write_retval(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(retval)) {
        return false;
    }
    return true;
}

// read min field
bool return_getScanLimits::read_min(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(min)) {
        reader.fail();
        return false;
    }
    return true;
}

// write min field
bool return_getScanLimits::write_min(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(min)) {
        return false;
    }
    return true;
}

// read (nested) min field
bool return_getScanLimits::nested_read_min(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(min)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) min field
bool return_getScanLimits::nested_write_min(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(min)) {
        return false;
    }
    return true;
}

// read max field
bool return_getScanLimits::read_max(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(max)) {
        reader.fail();
        return false;
    }
    return true;
}

// write max field
bool return_getScanLimits::write_max(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(max)) {
        return false;
    }
    return true;
}

// read (nested) max field
bool return_getScanLimits::nested_read_max(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(max)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) max field
bool return_getScanLimits::nested_write_max(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(max)) {
        return false;
    }
    return true;
}
