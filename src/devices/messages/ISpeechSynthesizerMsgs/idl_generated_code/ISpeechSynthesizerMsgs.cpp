/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <ISpeechSynthesizerMsgs.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

// set_language helper class declaration
class ISpeechSynthesizerMsgs_set_language_helper :
        public yarp::os::Portable
{
public:
    ISpeechSynthesizerMsgs_set_language_helper() = default;
    explicit ISpeechSynthesizerMsgs_set_language_helper(const std::string& language);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::string& language);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::string language{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const std::string&);
    void call(ISpeechSynthesizerMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_language"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ISpeechSynthesizerMsgs::set_language(const std::string& language)"};
    static constexpr const char* s_help{""};
};

// get_language helper class declaration
class ISpeechSynthesizerMsgs_get_language_helper :
        public yarp::os::Portable
{
public:
    ISpeechSynthesizerMsgs_get_language_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_get_language return_helper{};
    };

    using funcptr_t = return_get_language (*)();
    void call(ISpeechSynthesizerMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_language"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_get_language ISpeechSynthesizerMsgs::get_language()"};
    static constexpr const char* s_help{""};
};

// set_voice helper class declaration
class ISpeechSynthesizerMsgs_set_voice_helper :
        public yarp::os::Portable
{
public:
    ISpeechSynthesizerMsgs_set_voice_helper() = default;
    explicit ISpeechSynthesizerMsgs_set_voice_helper(const std::string& language);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::string& language);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::string language{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const std::string&);
    void call(ISpeechSynthesizerMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_voice"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ISpeechSynthesizerMsgs::set_voice(const std::string& language)"};
    static constexpr const char* s_help{""};
};

// get_voice helper class declaration
class ISpeechSynthesizerMsgs_get_voice_helper :
        public yarp::os::Portable
{
public:
    ISpeechSynthesizerMsgs_get_voice_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_get_voice return_helper{};
    };

    using funcptr_t = return_get_voice (*)();
    void call(ISpeechSynthesizerMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_voice"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_get_voice ISpeechSynthesizerMsgs::get_voice()"};
    static constexpr const char* s_help{""};
};

// set_speed helper class declaration
class ISpeechSynthesizerMsgs_set_speed_helper :
        public yarp::os::Portable
{
public:
    ISpeechSynthesizerMsgs_set_speed_helper() = default;
    explicit ISpeechSynthesizerMsgs_set_speed_helper(const double speed);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double speed);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double speed{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double);
    void call(ISpeechSynthesizerMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_speed"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ISpeechSynthesizerMsgs::set_speed(const double speed)"};
    static constexpr const char* s_help{""};
};

// get_speed helper class declaration
class ISpeechSynthesizerMsgs_get_speed_helper :
        public yarp::os::Portable
{
public:
    ISpeechSynthesizerMsgs_get_speed_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_get_speed return_helper{};
    };

    using funcptr_t = return_get_speed (*)();
    void call(ISpeechSynthesizerMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_speed"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_get_speed ISpeechSynthesizerMsgs::get_speed()"};
    static constexpr const char* s_help{""};
};

// set_pitch helper class declaration
class ISpeechSynthesizerMsgs_set_pitch_helper :
        public yarp::os::Portable
{
public:
    ISpeechSynthesizerMsgs_set_pitch_helper() = default;
    explicit ISpeechSynthesizerMsgs_set_pitch_helper(const double pitch);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double pitch);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double pitch{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double);
    void call(ISpeechSynthesizerMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"set_pitch"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool ISpeechSynthesizerMsgs::set_pitch(const double pitch)"};
    static constexpr const char* s_help{""};
};

// get_pitch helper class declaration
class ISpeechSynthesizerMsgs_get_pitch_helper :
        public yarp::os::Portable
{
public:
    ISpeechSynthesizerMsgs_get_pitch_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_get_pitch return_helper{};
    };

    using funcptr_t = return_get_pitch (*)();
    void call(ISpeechSynthesizerMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_pitch"};
    static constexpr size_t s_tag_len{2};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_get_pitch ISpeechSynthesizerMsgs::get_pitch()"};
    static constexpr const char* s_help{""};
};

// synthesize helper class declaration
class ISpeechSynthesizerMsgs_synthesize_helper :
        public yarp::os::Portable
{
public:
    ISpeechSynthesizerMsgs_synthesize_helper() = default;
    explicit ISpeechSynthesizerMsgs_synthesize_helper(const std::string& text);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::string& text);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::string text{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_synthesize return_helper{};
    };

    using funcptr_t = return_synthesize (*)(const std::string&);
    void call(ISpeechSynthesizerMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"synthesize"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_synthesize ISpeechSynthesizerMsgs::synthesize(const std::string& text)"};
    static constexpr const char* s_help{""};
};

// set_language helper class implementation
ISpeechSynthesizerMsgs_set_language_helper::ISpeechSynthesizerMsgs_set_language_helper(const std::string& language) :
        cmd{language}
{
}

bool ISpeechSynthesizerMsgs_set_language_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ISpeechSynthesizerMsgs_set_language_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ISpeechSynthesizerMsgs_set_language_helper::Command::Command(const std::string& language) :
        language{language}
{
}

bool ISpeechSynthesizerMsgs_set_language_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ISpeechSynthesizerMsgs_set_language_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ISpeechSynthesizerMsgs_set_language_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_language_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_language_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(language)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_language_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_language_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_language_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(language)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_language_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ISpeechSynthesizerMsgs_set_language_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ISpeechSynthesizerMsgs_set_language_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_language_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ISpeechSynthesizerMsgs_set_language_helper::call(ISpeechSynthesizerMsgs* ptr)
{
    reply.return_helper = ptr->set_language(cmd.language);
}

// get_language helper class implementation
bool ISpeechSynthesizerMsgs_get_language_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ISpeechSynthesizerMsgs_get_language_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool ISpeechSynthesizerMsgs_get_language_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ISpeechSynthesizerMsgs_get_language_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ISpeechSynthesizerMsgs_get_language_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_language_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_language_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool ISpeechSynthesizerMsgs_get_language_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_language_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_language_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_language_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ISpeechSynthesizerMsgs_get_language_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ISpeechSynthesizerMsgs_get_language_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_language_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ISpeechSynthesizerMsgs_get_language_helper::call(ISpeechSynthesizerMsgs* ptr)
{
    reply.return_helper = ptr->get_language();
}

// set_voice helper class implementation
ISpeechSynthesizerMsgs_set_voice_helper::ISpeechSynthesizerMsgs_set_voice_helper(const std::string& language) :
        cmd{language}
{
}

bool ISpeechSynthesizerMsgs_set_voice_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ISpeechSynthesizerMsgs_set_voice_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ISpeechSynthesizerMsgs_set_voice_helper::Command::Command(const std::string& language) :
        language{language}
{
}

bool ISpeechSynthesizerMsgs_set_voice_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ISpeechSynthesizerMsgs_set_voice_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ISpeechSynthesizerMsgs_set_voice_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_voice_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_voice_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(language)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_voice_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_voice_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_voice_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(language)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_voice_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ISpeechSynthesizerMsgs_set_voice_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ISpeechSynthesizerMsgs_set_voice_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_voice_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ISpeechSynthesizerMsgs_set_voice_helper::call(ISpeechSynthesizerMsgs* ptr)
{
    reply.return_helper = ptr->set_voice(cmd.language);
}

// get_voice helper class implementation
bool ISpeechSynthesizerMsgs_get_voice_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ISpeechSynthesizerMsgs_get_voice_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool ISpeechSynthesizerMsgs_get_voice_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ISpeechSynthesizerMsgs_get_voice_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ISpeechSynthesizerMsgs_get_voice_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_voice_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_voice_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool ISpeechSynthesizerMsgs_get_voice_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_voice_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_voice_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_voice_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ISpeechSynthesizerMsgs_get_voice_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ISpeechSynthesizerMsgs_get_voice_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_voice_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ISpeechSynthesizerMsgs_get_voice_helper::call(ISpeechSynthesizerMsgs* ptr)
{
    reply.return_helper = ptr->get_voice();
}

// set_speed helper class implementation
ISpeechSynthesizerMsgs_set_speed_helper::ISpeechSynthesizerMsgs_set_speed_helper(const double speed) :
        cmd{speed}
{
}

bool ISpeechSynthesizerMsgs_set_speed_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ISpeechSynthesizerMsgs_set_speed_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ISpeechSynthesizerMsgs_set_speed_helper::Command::Command(const double speed) :
        speed{speed}
{
}

bool ISpeechSynthesizerMsgs_set_speed_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ISpeechSynthesizerMsgs_set_speed_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ISpeechSynthesizerMsgs_set_speed_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_speed_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_speed_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(speed)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_speed_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_speed_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_speed_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(speed)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_speed_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ISpeechSynthesizerMsgs_set_speed_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ISpeechSynthesizerMsgs_set_speed_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_speed_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ISpeechSynthesizerMsgs_set_speed_helper::call(ISpeechSynthesizerMsgs* ptr)
{
    reply.return_helper = ptr->set_speed(cmd.speed);
}

// get_speed helper class implementation
bool ISpeechSynthesizerMsgs_get_speed_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ISpeechSynthesizerMsgs_get_speed_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool ISpeechSynthesizerMsgs_get_speed_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ISpeechSynthesizerMsgs_get_speed_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ISpeechSynthesizerMsgs_get_speed_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_speed_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_speed_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool ISpeechSynthesizerMsgs_get_speed_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_speed_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_speed_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_speed_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ISpeechSynthesizerMsgs_get_speed_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ISpeechSynthesizerMsgs_get_speed_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_speed_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ISpeechSynthesizerMsgs_get_speed_helper::call(ISpeechSynthesizerMsgs* ptr)
{
    reply.return_helper = ptr->get_speed();
}

// set_pitch helper class implementation
ISpeechSynthesizerMsgs_set_pitch_helper::ISpeechSynthesizerMsgs_set_pitch_helper(const double pitch) :
        cmd{pitch}
{
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ISpeechSynthesizerMsgs_set_pitch_helper::Command::Command(const double pitch) :
        pitch{pitch}
{
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(pitch)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(pitch)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.writeBool(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ISpeechSynthesizerMsgs_set_pitch_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ISpeechSynthesizerMsgs_set_pitch_helper::call(ISpeechSynthesizerMsgs* ptr)
{
    reply.return_helper = ptr->set_pitch(cmd.pitch);
}

// get_pitch helper class implementation
bool ISpeechSynthesizerMsgs_get_pitch_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ISpeechSynthesizerMsgs_get_pitch_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool ISpeechSynthesizerMsgs_get_pitch_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ISpeechSynthesizerMsgs_get_pitch_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ISpeechSynthesizerMsgs_get_pitch_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_pitch_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_pitch_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool ISpeechSynthesizerMsgs_get_pitch_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_pitch_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_pitch_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_pitch_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ISpeechSynthesizerMsgs_get_pitch_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ISpeechSynthesizerMsgs_get_pitch_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ISpeechSynthesizerMsgs_get_pitch_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ISpeechSynthesizerMsgs_get_pitch_helper::call(ISpeechSynthesizerMsgs* ptr)
{
    reply.return_helper = ptr->get_pitch();
}

// synthesize helper class implementation
ISpeechSynthesizerMsgs_synthesize_helper::ISpeechSynthesizerMsgs_synthesize_helper(const std::string& text) :
        cmd{text}
{
}

bool ISpeechSynthesizerMsgs_synthesize_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool ISpeechSynthesizerMsgs_synthesize_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

ISpeechSynthesizerMsgs_synthesize_helper::Command::Command(const std::string& text) :
        text{text}
{
}

bool ISpeechSynthesizerMsgs_synthesize_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool ISpeechSynthesizerMsgs_synthesize_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool ISpeechSynthesizerMsgs_synthesize_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_synthesize_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_synthesize_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(text)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_synthesize_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_synthesize_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_synthesize_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(text)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool ISpeechSynthesizerMsgs_synthesize_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool ISpeechSynthesizerMsgs_synthesize_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool ISpeechSynthesizerMsgs_synthesize_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool ISpeechSynthesizerMsgs_synthesize_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void ISpeechSynthesizerMsgs_synthesize_helper::call(ISpeechSynthesizerMsgs* ptr)
{
    reply.return_helper = ptr->synthesize(cmd.text);
}

// Constructor
ISpeechSynthesizerMsgs::ISpeechSynthesizerMsgs()
{
    yarp().setOwner(*this);
}

bool ISpeechSynthesizerMsgs::set_language(const std::string& language)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ISpeechSynthesizerMsgs_set_language_helper::s_prototype);
    }
    ISpeechSynthesizerMsgs_set_language_helper helper{language};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

return_get_language ISpeechSynthesizerMsgs::get_language()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ISpeechSynthesizerMsgs_get_language_helper::s_prototype);
    }
    ISpeechSynthesizerMsgs_get_language_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_get_language{};
}

bool ISpeechSynthesizerMsgs::set_voice(const std::string& language)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ISpeechSynthesizerMsgs_set_voice_helper::s_prototype);
    }
    ISpeechSynthesizerMsgs_set_voice_helper helper{language};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

return_get_voice ISpeechSynthesizerMsgs::get_voice()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ISpeechSynthesizerMsgs_get_voice_helper::s_prototype);
    }
    ISpeechSynthesizerMsgs_get_voice_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_get_voice{};
}

bool ISpeechSynthesizerMsgs::set_speed(const double speed)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ISpeechSynthesizerMsgs_set_speed_helper::s_prototype);
    }
    ISpeechSynthesizerMsgs_set_speed_helper helper{speed};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

return_get_speed ISpeechSynthesizerMsgs::get_speed()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ISpeechSynthesizerMsgs_get_speed_helper::s_prototype);
    }
    ISpeechSynthesizerMsgs_get_speed_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_get_speed{};
}

bool ISpeechSynthesizerMsgs::set_pitch(const double pitch)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ISpeechSynthesizerMsgs_set_pitch_helper::s_prototype);
    }
    ISpeechSynthesizerMsgs_set_pitch_helper helper{pitch};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

return_get_pitch ISpeechSynthesizerMsgs::get_pitch()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ISpeechSynthesizerMsgs_get_pitch_helper::s_prototype);
    }
    ISpeechSynthesizerMsgs_get_pitch_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_get_pitch{};
}

return_synthesize ISpeechSynthesizerMsgs::synthesize(const std::string& text)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", ISpeechSynthesizerMsgs_synthesize_helper::s_prototype);
    }
    ISpeechSynthesizerMsgs_synthesize_helper helper{text};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_synthesize{};
}

// help method
std::vector<std::string> ISpeechSynthesizerMsgs::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(ISpeechSynthesizerMsgs_set_language_helper::s_tag);
        helpString.emplace_back(ISpeechSynthesizerMsgs_get_language_helper::s_tag);
        helpString.emplace_back(ISpeechSynthesizerMsgs_set_voice_helper::s_tag);
        helpString.emplace_back(ISpeechSynthesizerMsgs_get_voice_helper::s_tag);
        helpString.emplace_back(ISpeechSynthesizerMsgs_set_speed_helper::s_tag);
        helpString.emplace_back(ISpeechSynthesizerMsgs_get_speed_helper::s_tag);
        helpString.emplace_back(ISpeechSynthesizerMsgs_set_pitch_helper::s_tag);
        helpString.emplace_back(ISpeechSynthesizerMsgs_get_pitch_helper::s_tag);
        helpString.emplace_back(ISpeechSynthesizerMsgs_synthesize_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == ISpeechSynthesizerMsgs_set_language_helper::s_tag) {
            helpString.emplace_back(ISpeechSynthesizerMsgs_set_language_helper::s_prototype);
        }
        if (functionName == ISpeechSynthesizerMsgs_get_language_helper::s_tag) {
            helpString.emplace_back(ISpeechSynthesizerMsgs_get_language_helper::s_prototype);
        }
        if (functionName == ISpeechSynthesizerMsgs_set_voice_helper::s_tag) {
            helpString.emplace_back(ISpeechSynthesizerMsgs_set_voice_helper::s_prototype);
        }
        if (functionName == ISpeechSynthesizerMsgs_get_voice_helper::s_tag) {
            helpString.emplace_back(ISpeechSynthesizerMsgs_get_voice_helper::s_prototype);
        }
        if (functionName == ISpeechSynthesizerMsgs_set_speed_helper::s_tag) {
            helpString.emplace_back(ISpeechSynthesizerMsgs_set_speed_helper::s_prototype);
        }
        if (functionName == ISpeechSynthesizerMsgs_get_speed_helper::s_tag) {
            helpString.emplace_back(ISpeechSynthesizerMsgs_get_speed_helper::s_prototype);
        }
        if (functionName == ISpeechSynthesizerMsgs_set_pitch_helper::s_tag) {
            helpString.emplace_back(ISpeechSynthesizerMsgs_set_pitch_helper::s_prototype);
        }
        if (functionName == ISpeechSynthesizerMsgs_get_pitch_helper::s_tag) {
            helpString.emplace_back(ISpeechSynthesizerMsgs_get_pitch_helper::s_prototype);
        }
        if (functionName == ISpeechSynthesizerMsgs_synthesize_helper::s_tag) {
            helpString.emplace_back(ISpeechSynthesizerMsgs_synthesize_helper::s_prototype);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool ISpeechSynthesizerMsgs::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 2;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if (tag == ISpeechSynthesizerMsgs_set_language_helper::s_tag) {
            ISpeechSynthesizerMsgs_set_language_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ISpeechSynthesizerMsgs_get_language_helper::s_tag) {
            ISpeechSynthesizerMsgs_get_language_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ISpeechSynthesizerMsgs_set_voice_helper::s_tag) {
            ISpeechSynthesizerMsgs_set_voice_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ISpeechSynthesizerMsgs_get_voice_helper::s_tag) {
            ISpeechSynthesizerMsgs_get_voice_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ISpeechSynthesizerMsgs_set_speed_helper::s_tag) {
            ISpeechSynthesizerMsgs_set_speed_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ISpeechSynthesizerMsgs_get_speed_helper::s_tag) {
            ISpeechSynthesizerMsgs_get_speed_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ISpeechSynthesizerMsgs_set_pitch_helper::s_tag) {
            ISpeechSynthesizerMsgs_set_pitch_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ISpeechSynthesizerMsgs_get_pitch_helper::s_tag) {
            ISpeechSynthesizerMsgs_get_pitch_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == ISpeechSynthesizerMsgs_synthesize_helper::s_tag) {
            ISpeechSynthesizerMsgs_synthesize_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}
