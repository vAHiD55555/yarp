/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sat Apr  6 12:05:04 2024


#ifndef BOSCHIMU_PARAMSPARSER_H
#define BOSCHIMU_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class BoschIMU.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units | Default Value           | Required | Description                                                                             | Notes                                                                                               |
* |:----------:|:--------------:|:------:|:-----:|:-----------------------:|:--------:|:---------------------------------------------------------------------------------------:|:---------------------------------------------------------------------------------------------------:|
* | -          | comport        | string | -     | -                       | 0        | full name of device file                                                                | ex '/dev/ttyUSB0', it is mutually exclusive with 'i2c' parameter                                    |
* | -          | baudrate       | int    | -     | 115200                  | 0        | baudrate setting of COM port                                                            | used only with serial configuration                                                                 |
* | -          | i2c            | string | -     | -                       | 0        | full name of device file                                                                | ex '/dev/i2c-5', it is mutually exclusive with 'comport' parameter, necessary for i2c configuration |
* | -          | period         | int    | ms    | 10                      | 0        | period of the thread                                                                    | -                                                                                                   |
* | -          | sensor_name    | string | -     | sensor_imu_bosch_bno055 | 0        | full name of the device                                                                 | -                                                                                                   |
* | -          | frame_name     | string | -     | sensor_imu_bosch_bno055 | 0        | full name of the sensor frame in which the measurements are expressed                   | -                                                                                                   |
* | -          | channels       | int    | -     | 12                      | 0        | number of channels in the output port. Default 12. If 16, also includes quaternion data | -                                                                                                   |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device imuBosch_BNO055 --comport <optional_value> --baudrate 115200 --i2c <optional_value> --period 10 --sensor_name sensor_imu_bosch_bno055 --frame_name sensor_imu_bosch_bno055 --channels 12
* \endcode
*
* \code{.unparsed}
* yarpdev --device imuBosch_BNO055
* \endcode
*
*/

class BoschIMU_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    BoschIMU_ParamsParser();
    ~BoschIMU_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"BoschIMU"};
    const std::string m_device_name = {"imuBosch_BNO055"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_comport_defaultValue = {""};
    const std::string m_baudrate_defaultValue = {"115200"};
    const std::string m_i2c_defaultValue = {""};
    const std::string m_period_defaultValue = {"10"};
    const std::string m_sensor_name_defaultValue = {"sensor_imu_bosch_bno055"};
    const std::string m_frame_name_defaultValue = {"sensor_imu_bosch_bno055"};
    const std::string m_channels_defaultValue = {"12"};

    std::string m_comport = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    int m_baudrate = {115200};
    std::string m_i2c = {}; //This default value of this string is an empty string. It is highly recommended to provide a suggested value also for optional string parameters.
    int m_period = {10};
    std::string m_sensor_name = {"sensor_imu_bosch_bno055"};
    std::string m_frame_name = {"sensor_imu_bosch_bno055"};
    int m_channels = {12};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
