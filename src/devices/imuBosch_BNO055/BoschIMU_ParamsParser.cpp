/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sat Apr  6 12:05:04 2024


#include "BoschIMU_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(BoschIMUParamsCOMPONENT, "yarp.device.BoschIMU")
}


BoschIMU_ParamsParser::BoschIMU_ParamsParser()
{
}


std::vector<std::string> BoschIMU_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("comport");
    params.push_back("baudrate");
    params.push_back("i2c");
    params.push_back("period");
    params.push_back("sensor_name");
    params.push_back("frame_name");
    params.push_back("channels");
    return params;
}


bool      BoschIMU_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(BoschIMUParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter comport
    {
        if (config.check("comport"))
        {
            m_comport = config.find("comport").asString();
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'comport' using value:" << m_comport;
        }
        else
        {
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'comport' using DEFAULT value:" << m_comport;
        }
        prop_check.unput("comport");
    }

    //Parser of parameter baudrate
    {
        if (config.check("baudrate"))
        {
            m_baudrate = config.find("baudrate").asInt64();
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'baudrate' using value:" << m_baudrate;
        }
        else
        {
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'baudrate' using DEFAULT value:" << m_baudrate;
        }
        prop_check.unput("baudrate");
    }

    //Parser of parameter i2c
    {
        if (config.check("i2c"))
        {
            m_i2c = config.find("i2c").asString();
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'i2c' using value:" << m_i2c;
        }
        else
        {
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'i2c' using DEFAULT value:" << m_i2c;
        }
        prop_check.unput("i2c");
    }

    //Parser of parameter period
    {
        if (config.check("period"))
        {
            m_period = config.find("period").asInt64();
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'period' using value:" << m_period;
        }
        else
        {
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'period' using DEFAULT value:" << m_period;
        }
        prop_check.unput("period");
    }

    //Parser of parameter sensor_name
    {
        if (config.check("sensor_name"))
        {
            m_sensor_name = config.find("sensor_name").asString();
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'sensor_name' using value:" << m_sensor_name;
        }
        else
        {
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'sensor_name' using DEFAULT value:" << m_sensor_name;
        }
        prop_check.unput("sensor_name");
    }

    //Parser of parameter frame_name
    {
        if (config.check("frame_name"))
        {
            m_frame_name = config.find("frame_name").asString();
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'frame_name' using value:" << m_frame_name;
        }
        else
        {
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'frame_name' using DEFAULT value:" << m_frame_name;
        }
        prop_check.unput("frame_name");
    }

    //Parser of parameter channels
    {
        if (config.check("channels"))
        {
            m_channels = config.find("channels").asInt64();
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'channels' using value:" << m_channels;
        }
        else
        {
            yCInfo(BoschIMUParamsCOMPONENT) << "Parameter 'channels' using DEFAULT value:" << m_channels;
        }
        prop_check.unput("channels");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(BoschIMUParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(BoschIMUParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      BoschIMU_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: BoschIMU\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'comport': full name of device file\n");
    doc = doc + std::string("'baudrate': baudrate setting of COM port\n");
    doc = doc + std::string("'i2c': full name of device file\n");
    doc = doc + std::string("'period': period of the thread\n");
    doc = doc + std::string("'sensor_name': full name of the device\n");
    doc = doc + std::string("'frame_name': full name of the sensor frame in which the measurements are expressed\n");
    doc = doc + std::string("'channels': number of channels in the output port. Default 12. If 16, also includes quaternion data\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device imuBosch_BNO055 --comport <optional_value> --baudrate 115200 --i2c <optional_value> --period 10 --sensor_name sensor_imu_bosch_bno055 --frame_name sensor_imu_bosch_bno055 --channels 12\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device imuBosch_BNO055\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
