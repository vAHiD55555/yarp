/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sat Apr  6 12:45:14 2024


#include "FrameTransformStorage_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(FrameTransformStorageParamsCOMPONENT, "yarp.device.FrameTransformStorage")
}


FrameTransformStorage_ParamsParser::FrameTransformStorage_ParamsParser()
{
}


std::vector<std::string> FrameTransformStorage_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("FrameTransform_verbose_debug");
    params.push_back("FrameTransform_container_timeout");
    return params;
}


bool      FrameTransformStorage_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(FrameTransformStorageParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter FrameTransform_verbose_debug
    {
        if (config.check("FrameTransform_verbose_debug"))
        {
            m_FrameTransform_verbose_debug = config.find("FrameTransform_verbose_debug").asBool();
            yCInfo(FrameTransformStorageParamsCOMPONENT) << "Parameter 'FrameTransform_verbose_debug' using value:" << m_FrameTransform_verbose_debug;
        }
        else
        {
            yCInfo(FrameTransformStorageParamsCOMPONENT) << "Parameter 'FrameTransform_verbose_debug' using DEFAULT value:" << m_FrameTransform_verbose_debug;
        }
        prop_check.unput("FrameTransform_verbose_debug");
    }

    //Parser of parameter FrameTransform_container_timeout
    {
        if (config.check("FrameTransform_container_timeout"))
        {
            m_FrameTransform_container_timeout = config.find("FrameTransform_container_timeout").asFloat64();
            yCInfo(FrameTransformStorageParamsCOMPONENT) << "Parameter 'FrameTransform_container_timeout' using value:" << m_FrameTransform_container_timeout;
        }
        else
        {
            yCInfo(FrameTransformStorageParamsCOMPONENT) << "Parameter 'FrameTransform_container_timeout' using DEFAULT value:" << m_FrameTransform_container_timeout;
        }
        prop_check.unput("FrameTransform_container_timeout");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(FrameTransformStorageParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(FrameTransformStorageParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      FrameTransformStorage_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: FrameTransformStorage\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'FrameTransform_verbose_debug': Enables additinal debug print\n");
    doc = doc + std::string("'FrameTransform_container_timeout': After this time, not-refreshed transforms will be deleted\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device frameTransformStorage --FrameTransform_verbose_debug false --FrameTransform_container_timeout 0.2\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device frameTransformStorage\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
