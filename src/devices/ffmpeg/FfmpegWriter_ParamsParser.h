/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sat Apr  6 12:05:03 2024


#ifndef FFMPEGWRITER_PARAMSPARSER_H
#define FFMPEGWRITER_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class FfmpegWriter.
*
* These are the used parameters:
* | Group name | Parameter name | Type   | Units | Default Value | Required | Description                    | Notes |
* |:----------:|:--------------:|:------:|:-----:|:-------------:|:--------:|:------------------------------:|:-----:|
* | -          | width          | int    | -     | 0             | 0        | width of image (must be even)  | -     |
* | -          | height         | int    | -     | 0             | 0        | height of image (must be even) | -     |
* | -          | framerate      | int    | -     | 30            | 0        | baseline images per second     | -     |
* | -          | audio          | bool   | -     | false         | 0        | should audio be included?      | -     |
* | -          | channels       | int    | -     | 1             | 0        | number of audio channels       | -     |
* | -          | sample_rate    | int    | -     | 44100         | 0        | audio samples per second       | -     |
* | -          | out            | string | -     | movie.avi     | 0        | name of movie to write         | -     |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device ffmpeg_writer --width 0 --height 0 --framerate 30 --audio false --channels 1 --sample_rate 44100 --out movie.avi
* \endcode
*
* \code{.unparsed}
* yarpdev --device ffmpeg_writer
* \endcode
*
*/

class FfmpegWriter_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    FfmpegWriter_ParamsParser();
    ~FfmpegWriter_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"FfmpegWriter"};
    const std::string m_device_name = {"ffmpeg_writer"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_width_defaultValue = {"0"};
    const std::string m_height_defaultValue = {"0"};
    const std::string m_framerate_defaultValue = {"30"};
    const std::string m_audio_defaultValue = {"false"};
    const std::string m_channels_defaultValue = {"1"};
    const std::string m_sample_rate_defaultValue = {"44100"};
    const std::string m_out_defaultValue = {"movie.avi"};

    int m_width = {0};
    int m_height = {0};
    int m_framerate = {30};
    bool m_audio = {false};
    int m_channels = {1};
    int m_sample_rate = {44100};
    std::string m_out = {"movie.avi"};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
