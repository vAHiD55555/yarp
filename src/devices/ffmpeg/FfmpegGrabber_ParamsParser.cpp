/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Sat Apr  6 12:45:14 2024


#include "FfmpegGrabber_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(FfmpegGrabberParamsCOMPONENT, "yarp.device.FfmpegGrabber")
}


FfmpegGrabber_ParamsParser::FfmpegGrabber_ParamsParser()
{
}


std::vector<std::string> FfmpegGrabber_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("source");
    params.push_back("loop");
    params.push_back("sync");
    params.push_back("nodelay");
    params.push_back("pace");
    params.push_back("v4l");
    params.push_back("v4l1");
    params.push_back("v4l2");
    params.push_back("ieee1394");
    params.push_back("v4ldevice");
    params.push_back("audio");
    params.push_back("audio_rate");
    params.push_back("channels");
    params.push_back("time_base_num");
    params.push_back("time_base_den");
    params.push_back("channel");
    params.push_back("standard");
    params.push_back("width");
    params.push_back("height");
    params.push_back("devname");
    return params;
}


bool      FfmpegGrabber_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(FfmpegGrabberParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter source
    {
        if (config.check("source"))
        {
            m_source = config.find("source").asString();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'source' using value:" << m_source;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'source' using DEFAULT value:" << m_source;
        }
        prop_check.unput("source");
    }

    //Parser of parameter loop
    {
        if (config.check("loop"))
        {
            m_loop = config.find("loop").asBool();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'loop' using value:" << m_loop;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'loop' using DEFAULT value:" << m_loop;
        }
        prop_check.unput("loop");
    }

    //Parser of parameter sync
    {
        if (config.check("sync"))
        {
            m_sync = config.find("sync").asString();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'sync' using value:" << m_sync;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'sync' using DEFAULT value:" << m_sync;
        }
        prop_check.unput("sync");
    }

    //Parser of parameter nodelay
    {
        if (config.check("nodelay"))
        {
            m_nodelay = config.find("nodelay").asBool();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'nodelay' using value:" << m_nodelay;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'nodelay' using DEFAULT value:" << m_nodelay;
        }
        prop_check.unput("nodelay");
    }

    //Parser of parameter pace
    {
        if (config.check("pace"))
        {
            m_pace = config.find("pace").asFloat64();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'pace' using value:" << m_pace;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'pace' using DEFAULT value:" << m_pace;
        }
        prop_check.unput("pace");
    }

    //Parser of parameter v4l
    {
        if (config.check("v4l"))
        {
            m_v4l = config.find("v4l").asBool();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'v4l' using value:" << m_v4l;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'v4l' using DEFAULT value:" << m_v4l;
        }
        prop_check.unput("v4l");
    }

    //Parser of parameter v4l1
    {
        if (config.check("v4l1"))
        {
            m_v4l1 = config.find("v4l1").asBool();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'v4l1' using value:" << m_v4l1;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'v4l1' using DEFAULT value:" << m_v4l1;
        }
        prop_check.unput("v4l1");
    }

    //Parser of parameter v4l2
    {
        if (config.check("v4l2"))
        {
            m_v4l2 = config.find("v4l2").asBool();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'v4l2' using value:" << m_v4l2;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'v4l2' using DEFAULT value:" << m_v4l2;
        }
        prop_check.unput("v4l2");
    }

    //Parser of parameter ieee1394
    {
        if (config.check("ieee1394"))
        {
            m_ieee1394 = config.find("ieee1394").asBool();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'ieee1394' using value:" << m_ieee1394;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'ieee1394' using DEFAULT value:" << m_ieee1394;
        }
        prop_check.unput("ieee1394");
    }

    //Parser of parameter v4ldevice
    {
        if (config.check("v4ldevice"))
        {
            m_v4ldevice = config.find("v4ldevice").asString();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'v4ldevice' using value:" << m_v4ldevice;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'v4ldevice' using DEFAULT value:" << m_v4ldevice;
        }
        prop_check.unput("v4ldevice");
    }

    //Parser of parameter audio
    {
        if (config.check("audio"))
        {
            m_audio = config.find("audio").asString();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'audio' using value:" << m_audio;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'audio' using DEFAULT value:" << m_audio;
        }
        prop_check.unput("audio");
    }

    //Parser of parameter audio_rate
    {
        if (config.check("audio_rate"))
        {
            m_audio_rate = config.find("audio_rate").asInt64();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'audio_rate' using value:" << m_audio_rate;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'audio_rate' using DEFAULT value:" << m_audio_rate;
        }
        prop_check.unput("audio_rate");
    }

    //Parser of parameter channels
    {
        if (config.check("channels"))
        {
            m_channels = config.find("channels").asInt64();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'channels' using value:" << m_channels;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'channels' using DEFAULT value:" << m_channels;
        }
        prop_check.unput("channels");
    }

    //Parser of parameter time_base_num
    {
        if (config.check("time_base_num"))
        {
            m_time_base_num = config.find("time_base_num").asInt64();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'time_base_num' using value:" << m_time_base_num;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'time_base_num' using DEFAULT value:" << m_time_base_num;
        }
        prop_check.unput("time_base_num");
    }

    //Parser of parameter time_base_den
    {
        if (config.check("time_base_den"))
        {
            m_time_base_den = config.find("time_base_den").asInt64();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'time_base_den' using value:" << m_time_base_den;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'time_base_den' using DEFAULT value:" << m_time_base_den;
        }
        prop_check.unput("time_base_den");
    }

    //Parser of parameter channel
    {
        if (config.check("channel"))
        {
            m_channel = config.find("channel").asInt64();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'channel' using value:" << m_channel;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'channel' using DEFAULT value:" << m_channel;
        }
        prop_check.unput("channel");
    }

    //Parser of parameter standard
    {
        if (config.check("standard"))
        {
            m_standard = config.find("standard").asString();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'standard' using value:" << m_standard;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'standard' using DEFAULT value:" << m_standard;
        }
        prop_check.unput("standard");
    }

    //Parser of parameter width
    {
        if (config.check("width"))
        {
            m_width = config.find("width").asInt64();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'width' using value:" << m_width;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'width' using DEFAULT value:" << m_width;
        }
        prop_check.unput("width");
    }

    //Parser of parameter height
    {
        if (config.check("height"))
        {
            m_height = config.find("height").asInt64();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'height' using value:" << m_height;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'height' using DEFAULT value:" << m_height;
        }
        prop_check.unput("height");
    }

    //Parser of parameter devname
    {
        if (config.check("devname"))
        {
            m_devname = config.find("devname").asString();
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'devname' using value:" << m_devname;
        }
        else
        {
            yCInfo(FfmpegGrabberParamsCOMPONENT) << "Parameter 'devname' using DEFAULT value:" << m_devname;
        }
        prop_check.unput("devname");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(FfmpegGrabberParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(FfmpegGrabberParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      FfmpegGrabber_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: FfmpegGrabber\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'source': media file to read from\n");
    doc = doc + std::string("'loop': media should loop (default)\n");
    doc = doc + std::string("'sync': sync on image or audio (if have to choose)?\n");
    doc = doc + std::string("'nodelay': media will play in simulated realtime unless this is present\n");
    doc = doc + std::string("'pace': simulated realtime multiplier factor (must be <1 right now)\n");
    doc = doc + std::string("'v4l': if present, read from video4linux\n");
    doc = doc + std::string("'v4l1': if present, read from video4linux\n");
    doc = doc + std::string("'v4l2': if present, read from video4linux\n");
    doc = doc + std::string("'ieee1394': if present, read from firewire\n");
    doc = doc + std::string("'v4ldevice': device name\n");
    doc = doc + std::string("'audio': optional audio device name\n");
    doc = doc + std::string("'audio_rate': audio sample rate\n");
    doc = doc + std::string("'channels': number of channels\n");
    doc = doc + std::string("'time_base_num': numerator of basic time unit\n");
    doc = doc + std::string("'time_base_den': denominator of basic time unit\n");
    doc = doc + std::string("'channel': channel identifier\n");
    doc = doc + std::string("'standard': pal versus ntsc\n");
    doc = doc + std::string("'width': width of image\n");
    doc = doc + std::string("'height': height of image\n");
    doc = doc + std::string("'devname': firewire device name\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device ffmpeg_grabber --source default.avi --loop true --sync image --nodelay false --pace 1.0 --v4l false --v4l1 false --v4l2 false --ieee1394 false --v4ldevice /dev/video0 --audio /dev/dsp --audio_rate 44100 --channels 1 --time_base_num 1 --time_base_den 29 --channel 0 --standard <optional_value> --width 640 --height 480 --devname /dev/dv1394\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device ffmpeg_grabber\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
