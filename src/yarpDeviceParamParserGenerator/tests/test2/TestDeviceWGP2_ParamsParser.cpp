/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Mar  7 16:55:08 2024


#include "TestDeviceWGP2_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(TestDeviceWGP2ParamsCOMPONENT, "yarp.device.TestDeviceWGP2")
}


TestDeviceWGP2_ParamsParser::TestDeviceWGP2_ParamsParser()
{
    //Default value of parameterparam_vec4
    {
        m_param_vec4.clear();
        yarp::os::Value tempVal;
        tempVal.fromString(m_param_vec4_defaultValue.c_str());
        yarp::os::Bottle* tempBot = tempVal.asList();
        if (tempBot && tempBot->size()!=0)
        {
            for (size_t i=0; i<tempBot->size(); i++)
            {
                m_param_vec4.push_back(tempBot->get(i).asInt64());
            }
        }
        else
        {
             yError() <<"parameter 'param_vec4' is not a properly formatted bottle";
        }
    }

    //Default value of parameterparam_vec5
    {
        m_param_vec5.clear();
        yarp::os::Value tempVal;
        tempVal.fromString(m_param_vec5_defaultValue.c_str());
        yarp::os::Bottle* tempBot = tempVal.asList();
        if (tempBot && tempBot->size()!=0)
        {
            for (size_t i=0; i<tempBot->size(); i++)
            {
                m_param_vec5.push_back(tempBot->get(i).asFloat64());
            }
        }
        else
        {
             yError() <<"parameter 'param_vec5' is not a properly formatted bottle";
        }
    }

    //Default value of parameterparam_vec6
    {
        m_param_vec6.clear();
        yarp::os::Value tempVal;
        tempVal.fromString(m_param_vec6_defaultValue.c_str());
        yarp::os::Bottle* tempBot = tempVal.asList();
        if (tempBot && tempBot->size()!=0)
        {
            for (size_t i=0; i<tempBot->size(); i++)
            {
                m_param_vec6.push_back(tempBot->get(i).asString());
            }
        }
        else
        {
             yError() <<"parameter 'param_vec6' is not a properly formatted bottle";
        }
    }

}


std::vector<std::string> TestDeviceWGP2_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("param_vec4");
    params.push_back("param_vec5");
    params.push_back("param_vec6");
    params.push_back("param_vec7");
    params.push_back("param_vec8");
    params.push_back("param_vec9");
    return params;
}


bool      TestDeviceWGP2_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(TestDeviceWGP2ParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    std::string config_string = config.toString();
    yarp::os::Property prop_check(config_string.c_str());
    //Parser of parameter param_vec4
    {
        if (config.check("param_vec4"))
        {
            {
                m_param_vec4.clear();
                yarp::os::Bottle* tempBot = config.find("param_vec4").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_param_vec4.push_back(tempBot->get(i).asInt64());
                    }
                }
                else
                {
                     yCError(TestDeviceWGP2ParamsCOMPONENT) <<"parameter 'param_vec4' is not a properly formatted bottle";
                }
            }
            yCInfo(TestDeviceWGP2ParamsCOMPONENT) << "Parameter 'param_vec4' using value:" << m_param_vec4;
        }
        else
        {
            yCInfo(TestDeviceWGP2ParamsCOMPONENT) << "Parameter 'param_vec4' using DEFAULT value:" << m_param_vec4;
        }
        prop_check.unput("param_vec4");
    }

    //Parser of parameter param_vec5
    {
        if (config.check("param_vec5"))
        {
            {
                m_param_vec5.clear();
                yarp::os::Bottle* tempBot = config.find("param_vec5").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_param_vec5.push_back(tempBot->get(i).asFloat64());
                    }
                }
                else
                {
                     yCError(TestDeviceWGP2ParamsCOMPONENT) <<"parameter 'param_vec5' is not a properly formatted bottle";
                }
            }
            yCInfo(TestDeviceWGP2ParamsCOMPONENT) << "Parameter 'param_vec5' using value:" << m_param_vec5;
        }
        else
        {
            yCInfo(TestDeviceWGP2ParamsCOMPONENT) << "Parameter 'param_vec5' using DEFAULT value:" << m_param_vec5;
        }
        prop_check.unput("param_vec5");
    }

    //Parser of parameter param_vec6
    {
        if (config.check("param_vec6"))
        {
            {
                m_param_vec6.clear();
                yarp::os::Bottle* tempBot = config.find("param_vec6").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_param_vec6.push_back(tempBot->get(i).asString());
                    }
                }
                else
                {
                     yCError(TestDeviceWGP2ParamsCOMPONENT) <<"parameter 'param_vec6' is not a properly formatted bottle";
                }
            }
            yCInfo(TestDeviceWGP2ParamsCOMPONENT) << "Parameter 'param_vec6' using value:" << m_param_vec6;
        }
        else
        {
            yCInfo(TestDeviceWGP2ParamsCOMPONENT) << "Parameter 'param_vec6' using DEFAULT value:" << m_param_vec6;
        }
        prop_check.unput("param_vec6");
    }

    //Parser of parameter param_vec7
    {
        if (config.check("param_vec7"))
        {
            {
                m_param_vec7.clear();
                yarp::os::Bottle* tempBot = config.find("param_vec7").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_param_vec7.push_back(tempBot->get(i).asInt64());
                    }
                }
                else
                {
                     yCError(TestDeviceWGP2ParamsCOMPONENT) <<"parameter 'param_vec7' is not a properly formatted bottle";
                }
            }
            yCInfo(TestDeviceWGP2ParamsCOMPONENT) << "Parameter 'param_vec7' using value:" << m_param_vec7;
        }
        else
        {
            yCError(TestDeviceWGP2ParamsCOMPONENT) << "Mandatory parameter 'param_vec7' not found!";
            yCError(TestDeviceWGP2ParamsCOMPONENT) << "Description of the parameter: Test param 42";
            yCError(TestDeviceWGP2ParamsCOMPONENT) << "Remember: Units for this parameter are: 'm'";
            return false;
        }
        prop_check.unput("param_vec7");
    }

    //Parser of parameter param_vec8
    {
        if (config.check("param_vec8"))
        {
            {
                m_param_vec8.clear();
                yarp::os::Bottle* tempBot = config.find("param_vec8").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_param_vec8.push_back(tempBot->get(i).asFloat64());
                    }
                }
                else
                {
                     yCError(TestDeviceWGP2ParamsCOMPONENT) <<"parameter 'param_vec8' is not a properly formatted bottle";
                }
            }
            yCInfo(TestDeviceWGP2ParamsCOMPONENT) << "Parameter 'param_vec8' using value:" << m_param_vec8;
        }
        else
        {
            yCError(TestDeviceWGP2ParamsCOMPONENT) << "Mandatory parameter 'param_vec8' not found!";
            yCError(TestDeviceWGP2ParamsCOMPONENT) << "Description of the parameter: Test param 43";
            yCError(TestDeviceWGP2ParamsCOMPONENT) << "Remember: Units for this parameter are: 'm'";
            return false;
        }
        prop_check.unput("param_vec8");
    }

    //Parser of parameter param_vec9
    {
        if (config.check("param_vec9"))
        {
            {
                m_param_vec9.clear();
                yarp::os::Bottle* tempBot = config.find("param_vec9").asList();
                if (tempBot)
                {
                    std::string tempBots = tempBot->toString();
                    for (size_t i=0; i<tempBot->size(); i++)
                    {
                        m_param_vec9.push_back(tempBot->get(i).asString());
                    }
                }
                else
                {
                     yCError(TestDeviceWGP2ParamsCOMPONENT) <<"parameter 'param_vec9' is not a properly formatted bottle";
                }
            }
            yCInfo(TestDeviceWGP2ParamsCOMPONENT) << "Parameter 'param_vec9' using value:" << m_param_vec9;
        }
        else
        {
            yCError(TestDeviceWGP2ParamsCOMPONENT) << "Mandatory parameter 'param_vec9' not found!";
            yCError(TestDeviceWGP2ParamsCOMPONENT) << "Description of the parameter: Test param 44";
            yCError(TestDeviceWGP2ParamsCOMPONENT) << "Remember: Units for this parameter are: 'm'";
            return false;
        }
        prop_check.unput("param_vec9");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(TestDeviceWGP2ParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(TestDeviceWGP2ParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      TestDeviceWGP2_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: TestDeviceWGP2\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'param_vec4': Test param 39\n");
    doc = doc + std::string("'param_vec5': Test param 40\n");
    doc = doc + std::string("'param_vec6': Test param 41\n");
    doc = doc + std::string("'param_vec7': Test param 42\n");
    doc = doc + std::string("'param_vec8': Test param 43\n");
    doc = doc + std::string("'param_vec9': Test param 44\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device testDeviceWGP2 --param_vec4 \" (1 2 3) \" --param_vec5 \" (1.0 2.0 3.0) \" --param_vec6 \" (\"sa1\" \"sa2\" \"sa3\") \" --param_vec7 <mandatory_value> --param_vec8 <mandatory_value> --param_vec9 <mandatory_value>\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device testDeviceWGP2 --param_vec7 <mandatory_value> --param_vec8 <mandatory_value> --param_vec9 <mandatory_value>\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
