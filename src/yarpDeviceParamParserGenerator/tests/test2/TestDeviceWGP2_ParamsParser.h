/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Mar  7 16:55:08 2024


#ifndef TESTDEVICEWGP2_PARAMSPARSER_H
#define TESTDEVICEWGP2_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class TestDeviceWGP2.
*TestDeviceWGP is a fake device developed for testing the various functionalities of YarpDeviceParamParserGenerator tool.
*This block has been written with the purpose of testing the --input_extra_comments option.
*This last line has no specific meaning.
*Here there are some extra symbols used in the markdown format, such as the 'code' syntax.
*The **bold text** , the *italic text*, the list:
*1. First element
*2. Second element
*- unordered element 1
*- unordered element 2
*
*
* These are the used parameters:
* | Group name | Parameter name | Type           | Units | Default Value       | Required | Description   | Notes |
* |:----------:|:--------------:|:--------------:|:-----:|:-------------------:|:--------:|:-------------:|:-----:|
* | -          | param_vec4     | vector<int>    | m     | (1 2 3)             | 0        | Test param 39 | Note  |
* | -          | param_vec5     | vector<double> | m     | (1.0 2.0 3.0)       | 0        | Test param 40 | Note  |
* | -          | param_vec6     | vector<string> | m     | ("sa1" "sa2" "sa3") | 0        | Test param 41 | Note  |
* | -          | param_vec7     | vector<int>    | m     | -                   | 1        | Test param 42 | Note  |
* | -          | param_vec8     | vector<double> | m     | -                   | 1        | Test param 43 | Note  |
* | -          | param_vec9     | vector<string> | m     | -                   | 1        | Test param 44 | Note  |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device testDeviceWGP2 --param_vec4 \" (1 2 3) \" --param_vec5 \" (1.0 2.0 3.0) \" --param_vec6 \" (\"sa1\" \"sa2\" \"sa3\") \" --param_vec7 <mandatory_value> --param_vec8 <mandatory_value> --param_vec9 <mandatory_value>
* \endcode
*
* \code{.unparsed}
* yarpdev --device testDeviceWGP2 --param_vec7 <mandatory_value> --param_vec8 <mandatory_value> --param_vec9 <mandatory_value>
* \endcode
*
*/

class TestDeviceWGP2_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    TestDeviceWGP2_ParamsParser();
    ~TestDeviceWGP2_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"TestDeviceWGP2"};
    const std::string m_device_name = {"testDeviceWGP2"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 1;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    const std::string m_param_vec4_defaultValue = {"(1 2 3)"};
    const std::string m_param_vec5_defaultValue = {"(1.0 2.0 3.0)"};
    const std::string m_param_vec6_defaultValue = {"(\"sa1\" \"sa2\" \"sa3\")"};
    const std::string m_param_vec7_defaultValue = {""};
    const std::string m_param_vec8_defaultValue = {""};
    const std::string m_param_vec9_defaultValue = {""};

    std::vector<int> m_param_vec4 = { }; //Default values for lists are managed in the class constructor. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<double> m_param_vec5 = { }; //Default values for lists are managed in the class constructor. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<std::string> m_param_vec6 = { }; //Default values for lists are managed in the class constructor. It is highly recommended to provide a suggested value also for optional string parameters.
    std::vector<int> m_param_vec7 = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<double> m_param_vec8 = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.
    std::vector<std::string> m_param_vec9 = {}; //This default value is autogenerated. It is highly recommended to provide a suggested value also for mandatory parameters.

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
