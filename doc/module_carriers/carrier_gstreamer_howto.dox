/**
\ingroup carriers_examples
\defgroup carrier_gstreamer_howto Gstreamer carrier

\tableofcontents

If your robot has cameras with high resolution, you need to compress and to stream their images.
In order to achieve this, we use Gstreamer, a free framework for media applications.

This document contains a brief introduction to Gstreamer tool and explains how the high-resolution cameras stream is encoding and how a yarp application can read it.


\note They are still work in progress and should be considered experimental. Please report any problems.

\section gstreamer_introduction  Gstreamer: brief introduction
Gstreamer is a free framework for media applications; it provides a set of plugins that let the user to build applications by connecting them as in a pipeline. It has been ported to a wide range of operating systems, compilers and processors, including Nvidia GPUs.

A Gstreamer application is composed by a chain of elements, the base construction block of a Gstreamer application. An element takes an input stream from previous element in the chain, carries out its function, like encode, and passes the modified stream to the next element. Usually each element is a plugin.

The user can develop application in two way: the first consists in write an application in c/c++, where the elements are connected using API, while the second uses the gst-launch command-line tool. In the following an example of how to use gst-launch command:


\verbatim
gst-launch-1.0 -v videotestsrc ! ‘video/x-raw, format=(string)I420, width=(int)640, height=(int)480’ ! x264enc ! h264parse ! avdec_h264 ! autovideosink
\endverbatim

This command creates a source video test with the properties specified in this string <em> “video/x-raw, format=(string)I420, width=(int)640, height=(int)480”</em>; after it is encoded in h264, then decoded and shown. Each element of this pipeline, except the property element, is plugins dynamically loaded. The videotestsrc element lets the user to see a stream without using camera.

The previous command works on Linux, but since Gstreamer is platform independent, we can launch the same command on Windows taking care to change only hardware dependent plugin. So the same command on Windows is:

\verbatim
gst-launch-1.0 -v videotestsrc ! “video/x-raw, format=(string)I420, width=(int)640, height=(int)480” ! openh264enc ! h264parse ! avdec_h264 ! autovideosink
\endverbatim

It’s important to notice that the changed element is the encoder (openh264enc), while the decoder is the same. This because the decoder belongs to the plugin that wraps libav library, a cross-platform library to convert stream in a wide range of multimedia formats. [see \ref references chapter]


<em> Please see \ref notes section about commands in this tutorial. </em>

\section how_to_stream_h264 How to stream using h264 encoder
The server grabs images from cameras, so it needs to run on where cameras are connected.
The server is a Gstreamer command pipeline, while the client could be a yarp or a Gstreamer application connected to the robot’s network.

\subsection server_side Server side:
The server application consists in the following Gstreamer command:

\verbatim
gst-launch-1.0 -v v4l2src device="/dev/video1" ! ‘video/x-raw, width=1280, height=480, format=(string)I420’ ! omxh264enc ! h264parse ! rtph264pay pt=96 config-interval=5 ! udpsink host=224.0.0.1 auto-multicast=true  port=33000
\endverbatim


\li <em>v4l2src device="/dev/video1"</em>: reads the cameras using v4l (video for linux) driver
\li <em>‘video/x-raw, width=640, height=480, format=(string)I420’ </em>: this is a property-element that specifies image size and format. In order to know which sizes and format are available you can use “v4l2-ctl” utility.
\li <em>omxh264enc</em>: encodes in h264: plugin developed by Nvidia
\li <em>h264parse</em>: signals downstream the format of the stream
\li <em>rtph264pay</em>: puts h264 stream in rtp packets
\li <em>udpsink</em>: this is the last element and sends out the stream. In this case we use multicast, but it is possible to send the stream using unicast in this way: udpsink host=IP_ADDRESS_OF_CLIENT port=NOT_WELL_KNOWN_PORT_NUMBER


\subsection client_side Client side
The client can read the stream using Gstreamer native command:

\verbatim
gst-launch-1.0 -v udpsrc multicast-group=224.0.0.1 auto-multicast=true port=3000 caps="application/x-rtp, media=(string)video, encoding-name=(string)H264, payload=(int)96" ! rtph264depay ! h264parse ! avdec_h264 ! autovideosink
\endverbatim


\subsection some_options Some options and extra notes

\li <b>set the frame rate </b>: in server side exist the parameter framerate=30/1, that configures the framerate to which grab images. Insert in in property element: 'video/x-raw, format=(string)I420, width=(int)640, height=(int)480, framerate=30/1'
\li In some cases could be useful that server streams video at <b>constant rate</b>. You can achieve this adding this parameter to the encoder plugin: control-rate=2 bitrate=5000000
\li You can use the native Gstreamer plugin “videocrop” to crop the video:
    \verbatim
    gst-launch-1.0 -v udpsrc port=33000 caps="application/x-rtp, media=(string)video,  encoding-name=(string)H264, payload=(int)96" ! rtph264depay ! h264parse ! avdec_h264 ! videocrop left=10, right=30, top=50, bottom=50 ! autovideosink
    \endverbatim
\li <b>fakevideosink</b> plugin can be used instead of <b>autovideosink</b> to test the pipeline without displaying anything.
\li <b>videotestsrc</b> followed by the format specifier can be used to generate a test image
\li <b>filesrc / filesink</b> plugins can used to read from/write to file.
\li other useful encoder plugins: <b>x264,x265,avenc_mjpeg</b>. Suggested decoders: <b>avdec_h265,avdec_h265,avdec_mjpeg</b>
\li official plugins list: https://gstreamer.freedesktop.org/documentation/plugins_doc.html?gi-language=c
\li another common format for video/x-raw instead of <b>I420</b> is <b>RGB</b>

\section how_to_install_gstreamer How to install Gstreamer
Currently we are using 1.24.4 version.

\subsection ubuntu On Ubuntu
\li Packages required to build
    - libgstreamer1.0-dev
    - libgstreamer-plugins-base1.0-dev
\li Packages required to run
    - gstreamer1.0-plugins-base (for videoconvert and appsink)
    - gstreamer1.0-plugins-good (for udpsrc and rtph264depay)
    - gstreamer1.0-plugins-bad (for h264parse)
    - gstreamer1.0-libav (for avdec_h264)
\li Useful packages but not required
    - gstreamer1.0-tools
	
\verbatim
sudo apt-get install libgstreamer1.0-dev \
libgstreamer-plugins-base1.0-dev \
gstreamer1.0-plugins-base \
gstreamer1.0-plugins-good \
gstreamer1.0-plugins-bad \
gstreamer1.0-libav \
gstreamer1.0-tools
\endverbatim

\subsection windows On windows
You need to download both the main package and the devel package from here:
https://gstreamer.freedesktop.org/data/pkg/windows/

Installation of package Gstreamer:
\li choose typical installation
\li redo installation adding:
    - Gstreamer 1.0 devtools
    - Gstreamer 1.0  Libav wrapper

Installation of grstreamer devel package:
\li choose typical installation
\li redo installation adding:
    - Gstreamer 1.0 devtools
    - Gstreamer 1.0  Libav wrapper
\li Add in path environment variable the path to executable (Usually is C:\\gstreamer\\1.0\\x86_64\\bin)

\subsection check_installation Verify your installation
You can verify the installation by running a simple test application composed by a server and a client :

\subsubsection server Server side (example on Windows)

\verbatim
gst-launch-1.0 -v videotestsrc ! "video/x-raw, format=(string)I420, width=(int)640, height=(int)480" ! openh264enc ! h264parse ! rtph264pay pt=96 config-interval=5 ! udpsink host=<YOUR_IP_ADDRESS> port=<A_PORT_NUMBER>
\endverbatim

\subsubsection client Client side
\verbatim
gst-launch-1.0 -v udpsrc port=<A_PORT_NUMBER> caps="application/x-rtp, media=(string)video, encoding-name=(string)H264, payload=(int)96" ! rtph264depay ! h264parse ! avdec_h264 ! autovideosink
\endverbatim

\section yarp_usage Usage with yarp

If you want use a yarp application to read the stream you need to:
-#  install Gstreamer (see \ref how_to_install_gstreamer )
-#  compile yarp with “ENABLE_yarpcar_gstreamer” option enabled.
-#  Run the server as mentioned above.
-#  register a fake port to the yarp server, in this example called gstreamer_src: 
\verbatim
yarp name register /gstreamer_src  gstreamer  <SERVER_IP_ADRESS> <SERVER_IP_PORT>
\endverbatim
-#  set up your decoding pipeline by setting an environment variable with a string containing a string.
For example on windows:
\verbatim
set GSTREAMER_ENV=udpsrc port=<A_PORT_NUMBER> caps="application/x-rtp, media=(string)video, encoding-name=(string)H264, payload=(int)96" ! rtph264depay ! h264parse ! avdec_h264
\endverbatim
on linux:
\verbatim
export GSTREAMER_ENV="udpsrc port=15000 caps=\"application/x-rtp, media=(string)video, encoding-name=(string)H264, payload=(int)96\" ! rtph264depay ! h264parse ! avdec_h264"
\endverbatim
-#  run your application (e.g. yarpview, or your own application). This must be executed after setting the environment variable, i.e. the environment variable should be accessible to the executable.
\verbatim
yarpview --name /view
\endverbatim
-#  connect client and server port using gstreamer carrier:
\verbatim
yarp connect /gstreamer_src /view gstreamer+pipelineEnv.GSTREAMER_ENV
\endverbatim

Now on yarp view you can see the following image, where in the bottom right box there is snow pattern.

\image html h264GstVideoTestSrc.png ""

\section notes Notes
\li On Windows the property element uses ‘ instead of “
\li Another completely different way to use Yarp with Gstreamer is to use `Yarp Gstreamer Plugins`. They also allow to feed a yarp image inside a gstreamer pipeline. See documentation: \ref gstreamerplugins_module

\section references References
[1] Gstreamer documentation
https://gstreamer.freedesktop.org/documentation/

[2] Gstreamer plugins
https://gstreamer.freedesktop.org/documentation/plugins.html

[3] Libav library documentation
https://www.libav.org/index.html

[4] Gstreamer Libav plugin
https://gstreamer.freedesktop.org/modules/gst-libav.html

[5] h264 yarp plugin
     http://www.yarp.it/classyarp_1_1os_1_1H264Carrier.html

*/
